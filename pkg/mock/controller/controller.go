// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/docker/infrakit/pkg/controller (interfaces: Controller)

package controller

import (
	controller "github.com/docker/infrakit/pkg/controller"
	types "github.com/docker/infrakit/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Controller interface
type MockController struct {
	ctrl     *gomock.Controller
	recorder *_MockControllerRecorder
}

// Recorder for MockController (not exported)
type _MockControllerRecorder struct {
	mock *MockController
}

func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &_MockControllerRecorder{mock}
	return mock
}

func (_m *MockController) EXPECT() *_MockControllerRecorder {
	return _m.recorder
}

func (_m *MockController) Commit(_param0 controller.Operation, _param1 types.Spec) (types.Object, error) {
	ret := _m.ctrl.Call(_m, "Commit", _param0, _param1)
	ret0, _ := ret[0].(types.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) Commit(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit", arg0, arg1)
}

func (_m *MockController) Describe(_param0 *types.Metadata) ([]types.Object, error) {
	ret := _m.ctrl.Call(_m, "Describe", _param0)
	ret0, _ := ret[0].([]types.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) Describe(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Describe", arg0)
}

func (_m *MockController) Pause(_param0 *types.Metadata) ([]types.Object, error) {
	ret := _m.ctrl.Call(_m, "Pause", _param0)
	ret0, _ := ret[0].([]types.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) Pause(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Pause", arg0)
}

func (_m *MockController) Plan(_param0 controller.Operation, _param1 types.Spec) (types.Object, controller.Plan, error) {
	ret := _m.ctrl.Call(_m, "Plan", _param0, _param1)
	ret0, _ := ret[0].(types.Object)
	ret1, _ := ret[1].(controller.Plan)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockControllerRecorder) Plan(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Plan", arg0, arg1)
}

func (_m *MockController) Specs(_param0 *types.Metadata) ([]types.Spec, error) {
	ret := _m.ctrl.Call(_m, "Specs", _param0)
	ret0, _ := ret[0].([]types.Spec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) Specs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Specs", arg0)
}

func (_m *MockController) Terminate(_param0 *types.Metadata) ([]types.Object, error) {
	ret := _m.ctrl.Call(_m, "Terminate", _param0)
	ret0, _ := ret[0].([]types.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerRecorder) Terminate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Terminate", arg0)
}
