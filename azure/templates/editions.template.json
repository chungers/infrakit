{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "swarmName": {
      "type": "string",
      "defaultValue": "dockerswarm",
      "metadata": {
        "description": "Define how the swarm resources should be named."
      }
    },
    "managerCount": {
        "allowedValues": [
            1,
            3,
            5
        ],
        "defaultValue": 1,
        "type": "int"
    },
    "workerCount": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15
      ],
      "metadata": {
        "description": "Number of Worker nodes"
      }
    },
    "workerVMSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v2",
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_A10",
        "Standard_A11",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5"
      ],
      "metadata": {
        "description": "The size of the created machines"
      }
    },
    "managerVMSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v2",
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_A10",
        "Standard_A11",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5"
      ],
      "metadata": {
        "description": "The size of the created Manager machines"
      }
    },
    "adServicePrincipalAppID": {
      "type": "string",
      "metadata": {
        "description": "AD ServicePrincipal App ID"
      }
    },
    "adServicePrincipalAppSecret": {
      "type": "securestring",
      "metadata": {
        "description": "AD ServicePrincipal App Secret"
      }
    },
    "sshPublicKey": {
      "type": "string",
      "metadata": {
        "description": "The SSH public key used to authenticate with the created swarm. Usually available in $HOME/.ssh/id_rsa.pub file"
      }
    },
    "enableSystemPrune": {
      "type": "string",
      "defaultValue": "no",
      "allowedValues": [
          "yes",
          "no"
      ],
      "metadata": {
        "description": "Cleans up unused images, containers, networks and volumes"
      }
    },
    "enableExtLogs": {
      "type": "string",
      "defaultValue": "yes",
      "allowedValues": [
          "yes",
          "no"
      ],
      "metadata": {
        "description": "Stores container logs in storage container on azure"
      }
    }
  },
  "variables": {
    "Description": "Docker for Azure 17.03.0 (17.03.0-ce-azure1)",
    "docker": "17.03.0",
    "DockerProviderTag": "8CF0E79C-DF97-4992-9B59-602DB544D354",
    "storageLocation": "[resourceGroup().location]",
    "imagePublisher": "docker",
    "imageOffer": "docker-ce",
    "imageSku": "docker-ce",
    "channel": "stable",
		"editionAddOn": "base",
    "imageVersion": "1.0.0",
    "imageReference": {
      "publisher": "[variables('imagePublisher')]",
      "offer": "[variables('imageOffer')]",
      "sku": "[variables('imageSku')]",
      "version": "[variables('imageVersion')]"
    },
    "apiVersion": "2016-03-30",
    "vmssApiVersion": "2017-03-30",
    "storApiVersion": "2016-12-01",
    "accountID": "[subscription().subscriptionId]",
    "groupName": "[resourceGroup().name]",
    "managerCount": "[parameters('managerCount')]",
    "workerCount": "[parameters('workerCount')]",
    "adminUsername": "docker",
    "sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
    "sshRSAPublicKey": "[parameters('sshPublicKey')]",
    "workerVMSize": "[parameters('workerVMSize')]",
    "basePrefix": "[parameters('swarmName')]",
    "managerVMSize": "[parameters('managerVMSize')]",
    "workerVMNamePrefix": "swarm-worker",
    "managerEndpointDNSNamePrefix": "manager",
    "vmssName": "swarm-worker-vmss",
    "lbSSHName": "externalSSHLoadBalancer",
    "lbSSHID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbSSHName'))]",
    "lbPublicIpDnsName": "[concat('applb-', variables('groupName'))]",
    "lbSSHBackendAddressPoolID": "[concat(variables('lbSSHID'),'/backendAddressPools/default')]",
    "lbSSHFrontEndIPConfigID": "[concat(variables('lbSSHID'),'/frontendIPConfigurations/default')]",
    "lbSSHNATPoolID": "[concat(variables('lbSSHID'),'/inboundNatPools/default')]",
    "lbSSHPublicIPAddressName": "[concat(variables('basePrefix'), '-', variables('lbSSHName'), '-public-ip')]",
    "natSSHStartPort": 50000,
    "natSSHEndPort": 50100,
    "lbName": "externalLoadBalancer",
    "lbPublicIPAddressName": "[concat(variables('basePrefix'), '-', variables('lbName'), '-public-ip')]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
    "lbBackendAddressPoolID": "[concat(variables('lbID'),'/backendAddressPools/default')]",
    "adServicePrincipalAppID": "[parameters('adServicePrincipalAppID')]",
    "adServicePrincipalAppSecret": "[parameters('adServicePrincipalAppSecret')]",
    "adServicePrincipalTenantID" : "[subscription().tenantId]",
    "virtualNetworkName": "[concat(variables('basePrefix'), '-vnet')]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "subnetName": "[concat(variables('basePrefix'), '-subnet')]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/', variables('subnetName'))]",
    "managerAddressPrefix": "172.16.0.0/24",
    "subnetPrefix": "10.0.0.0/8",
    "managerVMNamePrefix": "swarm-manager",
    "vmssManagersName": "swarm-manager-vmss",
    "managerFirstAddr": 5,
    "storageAccountSuffix": "docker",
    "storageAccountDNSSuffix": "",
    "vhdContainerName": "dockervhd",
    "uniqueStringArray": [
      "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'), '0')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'), '1')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'), '2')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'), '3')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'), '4')))]"
    ],
    "swarmInfoStorageAccount": "[concat(variables('uniqueStringArray')[0], variables('storageAccountSuffix'))]",
    "swarmInfoTable": "swarminfo",
    "swarmLogsStorageAccount": "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'))), 'logs')]",
    "portalFQDN": "",
    "customData": ""
  },
  "resources": [
    {
      "apiVersion": "[variables('storApiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('uniqueStringArray')[copyIndex()], variables('storageAccountSuffix'))]",
      "location": "[variables('storageLocation')]",
      "copy": {
        "name": "storageLoop",
        "count": "[length(variables('uniqueStringArray'))]"
      },
      "kind": "Storage",
      "sku": {
          "name": "Standard_LRS"
      },
      "tags": {
          "provider": "[toUpper(variables('DockerProviderTag'))]",
          "channel": "[variables('channel')]"
      }
    },
    {
      "apiVersion": "[variables('storApiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('swarmLogsStorageAccount')]",
      "location": "[variables('storageLocation')]",
      "kind": "Storage",
      "sku": {
          "name": "Standard_LRS"
      },
      "tags": {
          "provider": "[toUpper(variables('DockerProviderTag'))]",
          "channel": "[variables('channel')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[variables('storageLocation')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('subnetPrefix')]",
            "[variables('managerAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      },
      "tags": {
          "provider": "[toUpper(variables('DockerProviderTag'))]",
          "channel": "[variables('channel')]"
      }
    },
    {
      "apiVersion": "[variables('vmssApiVersion')]",
      "dependsOn": [
        "[variables('vnetID')]",
        "[variables('lbSSHID')]",
        "storageLoop"
      ],
      "location": "[variables('storageLocation')]",
      "name": "[variables('vmssManagersName')]",
      "plan": {
        "name": "[variables('imageSku')]",
        "product": "[variables('imageOffer')]",
        "publisher": "[variables('imagePublisher')]"
      },
      "properties": {
        "overprovision": false,
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[concat('https://', variables('uniqueStringArray')[0], variables('storageAccountSuffix'), variables('storageAccountDNSSuffix'))]"
            }
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "managerNodeNic",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "mgripconfig",
                      "privateIPAllocationMethod": "dynamic",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[variables('lbSSHBackendAddressPoolID')]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[variables('lbSSHNATPoolID')]"
                          }
                        ],
                        "subnet": {
                          "id": "[variables('subnetRef')]"
                        }
                      }
                    }
                  ],
                  "primary": true
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[variables('adminUsername')]",
            "computerNamePrefix": "[variables('managerVMNamePrefix')]",
            "customData": "[base64(concat('#!/bin/bash', '\n',  'export ROLE=\"MANAGER\"', '\n', 'export LB_IP=\"', reference(resourceId('Microsoft.Network/publicIPAddresses', variables('lbPublicIPAddressName'))).ipAddress, '\"', '\n', variables('customData')))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[variables('sshRSAPublicKey')]",
                    "path": "[variables('sshKeyPath')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": "[variables('imageReference')]",
            "osDisk": {
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "name": "[concat(variables('managerVMNamePrefix'), 'vmssosdisk')]",
              "vhdContainers": [
                "[concat('https://', variables('uniqueStringArray')[0], variables('storageAccountSuffix'), variables('storageAccountDNSSuffix'), '/', variables('vhdContainerName'))]"
              ]
            }
          }
        }
      },
      "sku": {
        "capacity": "[variables('managerCount')]",
        "name": "[variables('managerVMSize')]",
        "tier": "Standard"
      },
      "tags": {
          "provider": "[toUpper(variables('DockerProviderTag'))]",
          "channel": "[variables('channel')]"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "[variables('vmssApiVersion')]",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('vmssName')]",
      "location": "[variables('storageLocation')]",
      "dependsOn": [
        "[variables('vnetID')]",
        "[variables('lbID')]",
        "storageLoop"
      ],
      "sku": {
        "name": "[variables('workerVMSize')]",
        "tier": "Standard",
        "capacity": "[variables('workerCount')]"
      },
      "plan": {
        "name": "[variables('imageSku')]",
        "product": "[variables('imageOffer')]",
        "publisher": "[variables('imagePublisher')]"
      },
      "properties": {
        "overprovision": false,
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "imageReference": "[variables('imageReference')]",
            "osDisk": {
              "vhdContainers": [
                "[concat('https://', variables('uniqueStringArray')[0], variables('storageAccountSuffix'), variables('storageAccountDNSSuffix'), '/', variables('vhdContainerName'))]",
                "[concat('https://', variables('uniqueStringArray')[1], variables('storageAccountSuffix'), variables('storageAccountDNSSuffix'), '/', variables('vhdContainerName'))]",
                "[concat('https://', variables('uniqueStringArray')[2], variables('storageAccountSuffix'), variables('storageAccountDNSSuffix'), '/', variables('vhdContainerName'))]",
                "[concat('https://', variables('uniqueStringArray')[3], variables('storageAccountSuffix'), variables('storageAccountDNSSuffix'), '/', variables('vhdContainerName'))]",
                "[concat('https://', variables('uniqueStringArray')[4], variables('storageAccountSuffix'), variables('storageAccountDNSSuffix'), '/', variables('vhdContainerName'))]"
              ],
              "name": "[concat(variables('workerVMNamePrefix'), 'vmssosdisk', 0)]",
              "caching": "ReadWrite",
              "createOption": "FromImage"
            }
          },
          "osProfile": {
            "computerNamePrefix": "[variables('workerVMNamePrefix')]",
            "adminUsername": "[variables('adminUsername')]",
            "customData": "[base64(concat('#!/bin/bash', '\n', 'export ROLE=\"WORKER\"', '\n', 'export LB_IP=\"', reference(resourceId('Microsoft.Network/publicIPAddresses', variables('lbPublicIPAddressName'))).ipAddress, '\"', '\n', variables('customData')))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[variables('sshKeyPath')]",
                    "keyData": "[variables('sshRSAPublicKey')]"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "workerNodeNic",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "privateIPAllocationMethod": "dynamic",
                      "properties": {
                        "subnet": {
                          "id": "[variables('subnetRef')]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[ variables('lbBackendAddressPoolID')]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[concat('https://', variables('uniqueStringArray')[0], variables('storageAccountSuffix'), variables('storageAccountDNSSuffix'))]"
            }
          }
        }
      },
      "tags": {
          "provider": "[toUpper(variables('DockerProviderTag'))]",
          "channel": "[variables('channel')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('lbPublicIPAddressName')]",
      "location": "[variables('storageLocation')]",
      "properties": {
        "dnsSettings": {
            "domainNameLabel": "[variables('lbPublicIpDnsName')]"
        },
        "publicIPAllocationMethod": "Static"
      },
      "tags": {
          "provider": "[toUpper(variables('DockerProviderTag'))]",
          "channel": "[variables('channel')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "name": "[variables('lbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('lbPublicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "default",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('lbPublicIPAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "default"
          }
        ],
        "probes": [
          {
            "name": "default",
            "properties": {
              "protocol": "Tcp",
              "port": 44554,
              "intervalInSeconds": 10,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "tags": {
          "provider": "[toUpper(variables('DockerProviderTag'))]",
          "channel": "[variables('channel')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "location": "[variables('storageLocation')]",
      "name": "[variables('lbSSHPublicIPAddressName')]",
      "properties": {
        "publicIPAllocationMethod": "Static"
      },
      "tags": {
          "provider": "[toUpper(variables('DockerProviderTag'))]",
          "channel": "[variables('channel')]"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('lbSSHPublicIPAddressName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('lbSSHName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "default"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "default",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('lbSSHPublicIPAddressName'))]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "default",
            "properties": {
              "intervalInSeconds": 10,
              "numberOfProbes": 2,
              "port": 22,
              "protocol": "Tcp"
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "default",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('lbSSHFrontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": "[variables('natSSHStartPort')]",
              "frontendPortRangeEnd": "[variables('natSSHEndPort')]",
              "backendPort": 22
            }
          }
        ]
      },
      "tags": {
          "provider": "[toUpper(variables('DockerProviderTag'))]",
          "channel": "[variables('channel')]"
      },
      "type": "Microsoft.Network/loadBalancers"
    }
  ],
  "outputs": {
    "DefaultDNSTarget": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('lbPublicIPAddressName'))).ipAddress]"
    },
    "AppURL": {
      "type": "String",
      "value": "[concat(reference(resourceId('Microsoft.Network/publicIPAddresses', variables('lbPublicIPAddressName'))).dnsSettings.fqdn)]"
    },
    "SSH Targets": {
      "type": "string",
      "value": "[concat('https://', variables('portalFQDN'), '/#resource/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('lbSSHName'), '/inboundNatRules')]"
    }
  }
}
