{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "clusterName": {
            "type": "string",
            "defaultValue": "dockerswarm",
            "metadata": {
                "description": "Define how the cluster resources should be named."
            }
        },
        "vmLocation": {
          "type": "string",
          "allowedValues": [
            "North Europe",
            "West Europe",
            "Central US",
            "East US",
            "East US 2",
            "North Central US",
            "South Central US",
            "West US",
            "West US 2",
            "West Central US",
            "East Asia",
            "Southeast Asia",
            "Japan East",
            "Japan West",
            "Brazil South",
            "Australia East",
            "Australia Southeast",
            "Central India",
            "South India",
            "West India",
            "China East",
            "China North",
            "Canada Central",
            "Canada East"
          ]
        },
        "masterCount": {
            "type": "int",
            "defaultValue": 1,
            "allowedValues": [1]
        },
        "agentCount": {
            "type": "int",
            "defaultValue": 1,
            "allowedValues": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        },
        "agentVMSize": {
            "type": "string",
            "defaultValue": "Standard_D2",
            "allowedValues": ["Standard_D1", "Standard_D2", "Standard_D3", "Standard_D4"],
            "metadata": {
                "description": "The size of the created machines"
            }
        },
        "managerVMSize": {
            "type": "string",
            "defaultValue": "Standard_D2",
            "allowedValues": ["Standard_D1", "Standard_D2", "Standard_D3", "Standard_D4"],
            "metadata": {
                "description": "The size of the created Manager machines"
            }
        },
        "storageAccountName": {
          "type": "string",
          "minLength": 3,
          "metadata": {
            "description": "Globally unique storage account name to use for Virtual Disks"
          }
      },
        "sshPublicKey": {
            "type": "string",
            "metadata": {
                "description": "The SSH public key used to authenticate with the created cluster. Usually available in $HOME/.ssh/id_rsa.pub file"
            }
        }
    },
    "variables": {
        "dockerForIAASVersion": "azure-v1.12.0-beta4",
        "dockerVersion": "1.12.0",
        "apiVersion": "2016-03-30",
        "accountID": "[subscription().subscriptionId]",
        "masterCount": "[parameters('masterCount')]",
        "agentCount": "[parameters('agentCount')]",
        "adminUsername": "docker",
        "sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
        "sshRSAPublicKey": "[parameters('sshPublicKey')]",
        "agentVMSize": "[parameters('agentVMSize')]",
        "linuxImageURL": "https://dockereditions.blob.core.windows.net/mobylinux/5d981db36adb578bf857d64cf7dd2388-mobylinux.vhd",
        "storageLocation": "[parameters('vmLocation')]",
        "basePrefix": "[parameters('clusterName')]",
        "masterVMSize": "[parameters('managerVMSize')]",
        "agentVMNamePrefix": "[concat(variables('basePrefix'), '-agent-')]",
        "masterEndpointDNSNamePrefix": "manager",
        "vmssName": "[concat(variables('agentVMNamePrefix'), 'vmss')]",
        "diskStorageAccount": "[parameters('storageAccountName')]",
        "diskStorageURL": "[concat('https://', variables('diskStorageAccount'), '.blob.core.windows.net')]",

        "masterPublicIPAddressName": "[concat(variables('basePrefix'), '-master-ip-', variables('masterEndpointDNSNamePrefix'))]",
        "virtualNetworkName": "[concat(variables('basePrefix'), '-vnet')]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetName": "[concat(variables('basePrefix'), '-subnet')]",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/', variables('subnetName'))]",
        "masterAddressPrefix": "172.16.0.0/24",
        "subnetPrefix": "10.0.0.0/8",
        "masterNSGName": "[concat(variables('basePrefix'), '-master-nsg')]",
        "masterNSGID": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('masterNSGName'))]",
        "masterVMNamePrefix": "[concat(variables('basePrefix'), '-master')]",
        "masterFirstAddr": 5
    },
    "resources": [{
        "apiVersion": "[variables('apiVersion')]",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[variables('virtualNetworkName')]",
        "location": "[variables('storageLocation')]",
        "properties": {
            "addressSpace": {
                "addressPrefixes": [
                    "[variables('subnetPrefix')]",
                    "[variables('masterAddressPrefix')]"
                ]
            },
            "subnets": [{
                "name": "[variables('subnetName')]",
                "properties": {
                    "addressPrefix": "[variables('subnetPrefix')]"
                }
            }]
        }
    }, {
        "apiVersion": "[variables('apiVersion')]",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[concat(variables('masterPublicIPAddressName'), 'ip-', copyIndex())]",
        "location": "[variables('storageLocation')]",
        "copy": {
            "name": "ipLoopNode",
            "count": "[variables('masterCount')]"
        },
        "properties": {
            "publicIPAllocationMethod": "Static"
        }
    }, {
        "apiVersion": "[variables('apiVersion')]",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "[variables('masterNSGName')]",
        "location": "[variables('storageLocation')]",
        "properties": {
            "securityRules": [{
                "name": "ssh",
                "properties": {
                    "description": "Allow SSH",
                    "protocol": "Tcp",
                    "sourcePortRange": "*",
                    "destinationPortRange": "22",
                    "sourceAddressPrefix": "*",
                    "destinationAddressPrefix": "*",
                    "access": "Allow",
                    "priority": 201,
                    "direction": "Inbound"
                }
            }, {
                "name": "swarm-listen-port",
                "properties": {
                    "description": "Allow 'swarm join' ingress to master node",
                    "protocol": "Tcp",
                    "sourcePortRange": "*",
                    "destinationPortRange": "2377",
                    "sourceAddressPrefix": "[variables('subnetPrefix')]",
                    "destinationAddressPrefix": "[variables('subnetPrefix')]",
                    "access": "Allow",
                    "priority": 202,
                    "direction": "Inbound"
                }
            }, {
                "name": "docker-port",
                "properties": {
                    "description": "Allow 'docker' ingress to master node",
                    "protocol": "Tcp",
                    "sourcePortRange": "*",
                    "destinationPortRange": "2375",
                    "sourceAddressPrefix": "[variables('subnetPrefix')]",
                    "destinationAddressPrefix": "[variables('subnetPrefix')]",
                    "access": "Allow",
                    "priority": 205,
                    "direction": "Inbound"
                }
            }, {
                "name": "vxlan",
                "properties": {
                    "description": "Allow VXLan connection between nodes",
                    "protocol": "Udp",
                    "sourcePortRange": "*",
                    "destinationPortRange": "4789",
                    "sourceAddressPrefix": "[variables('subnetPrefix')]",
                    "destinationAddressPrefix": "[variables('subnetPrefix')]",
                    "access": "Allow",
                    "priority": 203,
                    "direction": "Inbound"
                }
            }, {
                "name": "gossip",
                "properties": {
                    "description": "Serf communication to gossip between nodes",
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "destinationPortRange": "7946",
                    "sourceAddressPrefix": "[variables('subnetPrefix')]",
                    "destinationAddressPrefix": "[variables('subnetPrefix')]",
                    "access": "Allow",
                    "priority": 204,
                    "direction": "Inbound"
                }
            }]
        }
    }, {
        "apiVersion": "[variables('apiVersion')]",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
        "location": "[variables('storageLocation')]",
        "copy": {
            "name": "nicLoopNode",
            "count": "[variables('masterCount')]"
        },
        "dependsOn": [
            "[variables('vnetID')]",
            "[variables('masterNSGID')]"
        ],
        "properties": {
            "networkSecurityGroup": {
                "id": "[variables('masterNSGID')]"
            },
            "ipConfigurations": [{
                "name": "ipConfigNode",
                "properties": {
                    "privateIPAllocationMethod": "dynamic",
                    "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('masterPublicIPAddressName'), 'ip-', copyIndex()))]"
                    },
                    "subnet": {
                        "id": "[variables('subnetRef')]"
                    }
                }
            }]
        }
    }, {
        "apiVersion": "[variables('apiVersion')]",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
        "location": "[variables('storageLocation')]",
        "copy": {
            "name": "vmLoopNode",
            "count": "[variables('masterCount')]"
        },
        "dependsOn": [
            "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]"
        ],
        "properties": {
            "hardwareProfile": {
                "vmSize": "[variables('masterVMSize')]"
            },
            "osProfile": {
                "computername": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
                "adminUsername": "[variables('adminUsername')]",
                "customData": "[base64(concat('export ROLE=MANAGER; export PRIVATE_IP=', reference(resourceId('Microsoft.Network/networkInterfaces', concat(variables('masterVMNamePrefix'), 'nic-0'))).ipConfigurations[0].properties.privateIPAddress, '; export ACCOUNT_ID=', variables('accountID'), '; export DOCKER_FOR_IAAS_VERSION=', variables('dockerForIAASVersion'), '; export REGION=', variables('storageLocation'),  '; docker run --restart=no -d -e ROLE=$ROLE -e REGION=$REGION -e ACCOUNT_ID=$ACCOUNT_ID -e PRIVATE_IP=$PRIVATE_IP -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /var/log:/var/log docker4x/init-azure:$DOCKER_FOR_IAAS_VERSION; docker run --restart=always -d -e ROLE=$ROLE -e REGION=$REGION -e ACCOUNT_ID=$ACCOUNT_ID -e PRIVATE_IP=$PRIVATE_IP -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker docker4x/guide-azure:$DOCKER_FOR_IAAS_VERSION;'))]",
                "linuxConfiguration": {
                    "disablePasswordAuthentication": true,
                    "ssh": {
                        "publicKeys": [{
                            "path": "[variables('sshKeyPath')]",
                            "keyData": "[variables('sshRSAPublicKey')]"
                        }]
                    }
                }
            },
            "storageProfile": {
                "osDisk": {
                    "osType": "Linux",
                    "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
                    "image": {
                        "uri": "[variables('linuxImageURL')]"
                    },
                    "vhd": {
                        "uri": "[concat(variables('diskStorageURL'), '/vhds/', variables('masterVMNamePrefix'), copyIndex(), uniqueString(resourceGroup().id), '-osdisk.vhd')]"
                    },
                    "caching": "ReadWrite",
                    "createOption": "FromImage"
                }
            },
            "networkProfile": {
                "networkInterfaces": [{
                    "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))]"
                }]
            },
            "diagnosticsProfile": {
                "bootDiagnostics": {
                    "enabled": true,
                    "storageUri": "[variables('diskStorageURL')]"
                }
            }
        }
    }, {
        "apiVersion": "[variables('apiVersion')]",
        "type": "Microsoft.Compute/virtualMachineScaleSets",
        "name": "[variables('vmssName')]",
        "location": "[variables('storageLocation')]",
        "dependsOn": [
            "[variables('vnetID')]"
        ],
        "sku": {
            "name": "[variables('agentVMSize')]",
            "tier": "Standard",
            "capacity": "[variables('agentCount')]"
        },
        "properties": {
            "overprovision": true,
            "upgradePolicy": {
                "mode": "Manual"
            },
            "virtualMachineProfile": {
                "storageProfile": {
                    "osDisk": {
                        "osType": "Linux",
                        "name": "[concat(variables('agentVMNamePrefix'), 'vmssosdisk', 0)]",
                        "image": {
                            "uri": "[variables('linuxImageURL')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "osProfile": {
                    "computerNamePrefix": "[variables('agentVMNamePrefix')]",
                    "adminUsername": "[variables('adminUsername')]",
                    "customData": "[base64(concat('export ROLE=WORKER; export MANAGER_IP=', reference(resourceId('Microsoft.Network/networkInterfaces', concat(variables('masterVMNamePrefix'), 'nic-0'))).ipConfigurations[0].properties.privateIPAddress, '; export REGION=', variables('storageLocation'), '; export ACCOUNT_ID=', variables('accountID'), '; export DOCKER_FOR_IAAS_VERSION=', variables('dockerForIAASVersion'), '; docker run --restart=no -d -e ROLE=$ROLE -e REGION=$REGION -e ACCOUNT_ID=$ACCOUNT_ID -e MANAGER_IP=$MANAGER_IP -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /var/log:/var/log docker4x/init-azure:$DOCKER_FOR_IAAS_VERSION; docker run --restart=always -d -e ROLE=$ROLE -e REGION=$REGION -e ACCOUNT_ID=$ACCOUNT_ID -e MANAGER_IP=$MANAGER_IP -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker docker4x/guide-azure:$DOCKER_FOR_IAAS_VERSION;'))]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [{
                                "path": "[variables('sshKeyPath')]",
                                "keyData": "[variables('sshRSAPublicKey')]"
                            }]
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaceConfigurations": [{
                        "name": "agentNodeNic",
                        "properties": {
                            "primary": "true",
                            "ipConfigurations": [{
                                "name": "nicipconfig",
                                "privateIPAllocationMethod": "dynamic",
                                "properties": {
                                    "subnet": {
                                        "id": "[variables('subnetRef')]"
                                    }
                                }
                            }]
                        }
                    }]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[variables('diskStorageURL')]"
                    }
                }
            }
        }
    }],
    "outputs": {
        "accessCommand": {
            "type": "string",
            "value": "[concat('ssh docker@', reference(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('masterPublicIPAddressName'), 'ip-0'))).ipAddress)]"
        }
    }
}
