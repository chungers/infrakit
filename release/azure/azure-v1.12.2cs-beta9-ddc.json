{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "swarmName": {
            "defaultValue": "dockerswarm",
            "type": "String",
            "metadata": {
                "description": "Define how the swarm resources should be named."
            }
        },
        "managerCount": {
            "defaultValue": 1,
            "allowedValues": [
                1
            ],
            "type": "Int",
            "metadata": {
                "description": "Number of Manager nodes"
            }
        },
        "workerCount": {
            "defaultValue": 1,
            "allowedValues": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15
            ],
            "type": "Int",
            "metadata": {
                "description": "Number of Worker nodes"
            }
        },
        "workerVMSize": {
            "defaultValue": "Standard_D2_v2",
            "allowedValues": [
                "Basic_A0",
                "Basic_A1",
                "Basic_A2",
                "Basic_A3",
                "Basic_A4",
                "Standard_A0",
                "Standard_A1",
                "Standard_A2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A9",
                "Standard_A10",
                "Standard_A11",
                "Standard_D1",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_D1_v2",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_DS1",
                "Standard_DS2",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_DS11",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS5"
            ],
            "type": "String",
            "metadata": {
                "description": "The size of the created machines"
            }
        },
        "managerVMSize": {
            "defaultValue": "Standard_D2_v2",
            "allowedValues": [
                "Basic_A0",
                "Basic_A1",
                "Basic_A2",
                "Basic_A3",
                "Basic_A4",
                "Standard_A0",
                "Standard_A1",
                "Standard_A2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A9",
                "Standard_A10",
                "Standard_A11",
                "Standard_D1",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_D1_v2",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_DS1",
                "Standard_DS2",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_DS11",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS5"
            ],
            "type": "String",
            "metadata": {
                "description": "The size of the created Manager machines"
            }
        },
        "adServicePrincipalAppID": {
            "type": "String",
            "metadata": {
                "description": "AD ServicePrincipal App ID"
            }
        },
        "adServicePrincipalAppSecret": {
            "type": "SecureString",
            "metadata": {
                "description": "AD ServicePrincipal App Secret"
            }
        },
        "adServicePrincipalTenantID": {
            "type": "String",
            "metadata": {
                "description": "AD ServicePrincipal Tenant ID"
            }
        },
        "sshPublicKey": {
            "type": "String",
            "metadata": {
                "description": "The SSH public key used to authenticate with the created swarm. Usually available in $HOME/.ssh/id_rsa.pub file"
            }
        },
        "DDCUsername": {
            "defaultValue": "admin",
            "type": "String",
            "metadata": {
                "description": "Please enter the username you want to use for Docker Datacenter."
            }
        },
        "DDCPassword": {
            "minLength": 8,
            "maxLength": 40,
            "type": "SecureString",
            "metadata": {
                "description": "Please enter the password you want to use for Docker Datacenter."
            }
        }
    },
    "variables": {
        "storageLocation": "[resourceGroup().location]",
        "groupName": "[resourceGroup().name]",
        "dockerForIAASVersion": "azure-v1.12.2-beta9",
        "dockerVersion": "1.12.0",
        "apiVersion": "2016-03-30",
        "accountID": "[subscription().subscriptionId]",
        "managerCount": "[parameters('managerCount')]",
        "workerCount": "[parameters('workerCount')]",
        "adminUsername": "docker",
        "sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
        "sshRSAPublicKey": "[parameters('sshPublicKey')]",
        "workerVMSize": "[parameters('workerVMSize')]",
        "basePrefix": "[parameters('swarmName')]",
        "managerVMSize": "[parameters('managerVMSize')]",
        "workerVMNamePrefix": "[concat(variables('basePrefix'), '-worker-')]",
        "managerEndpointDNSNamePrefix": "manager",
        "vmssName": "[concat(variables('workerVMNamePrefix'), 'vmss')]",
        "managerPublicIPAddressName": "[concat(variables('basePrefix'), '-manager-ip-', variables('managerEndpointDNSNamePrefix'))]",
        "lbName": "externalLoadBalancer",
        "lbPublicIPAddressName": "[concat(variables('basePrefix'), '-', variables('lbName'), '-public-ip')]",
        "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
        "lbBackendAddressPoolID": "[concat(variables('lbID'),'/backendAddressPools/default')]",
        "lbSSHName": "externalSSHLoadBalancer",
        "lbSSHPublicIPAddressName": "[concat(variables('basePrefix'), '-', variables('lbSSHName'), '-public-ip')]",
        "lbSSHID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbSSHName'))]",
        "adServicePrincipalAppID": "[parameters('adServicePrincipalAppID')]",
        "adServicePrincipalAppSecret": "[parameters('adServicePrincipalAppSecret')]",
        "adServicePrincipalTenantID": "[parameters('adServicePrincipalTenantID')]",
        "virtualNetworkName": "[concat(variables('basePrefix'), '-vnet')]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetName": "[concat(variables('basePrefix'), '-subnet')]",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/', variables('subnetName'))]",
        "managerAddressPrefix": "172.16.0.0/24",
        "subnetPrefix": "10.0.0.0/8",
        "managerNSGName": "[concat(variables('basePrefix'), '-manager-nsg')]",
        "managerNSGID": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('managerNSGName'))]",
        "managerVMNamePrefix": "[concat(variables('basePrefix'), '-manager')]",
        "managerFirstAddr": 5,
        "storageAccountSuffix": "docker",
        "vhdContainerName": "dockervhd",
        "uniqueStringArray": [
            "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'), '0')))]",
            "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'), '1')))]",
            "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'), '2')))]",
            "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'), '3')))]",
            "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'), '4')))]"
        ],
        "ddcUser": "[parameters('DDCUsername')]",
        "ddcPass": "[parameters('DDCPassword')]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[concat(variables('uniqueStringArray')[copyIndex()], variables('storageAccountSuffix'))]",
            "apiVersion": "2015-06-15",
            "location": "[variables('storageLocation')]",
            "copy": {
                "name": "storageLoop",
                "count": "[length(variables('uniqueStringArray'))]"
            },
            "properties": {
                "accountType": "Standard_LRS"
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "apiVersion": "[variables('apiVersion')]",
            "location": "[variables('storageLocation')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('subnetPrefix')]",
                        "[variables('managerAddressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat(variables('managerPublicIPAddressName'), 'ip-', copyIndex())]",
            "apiVersion": "[variables('apiVersion')]",
            "location": "[variables('storageLocation')]",
            "copy": {
                "name": "ipLoopNode",
                "count": "[variables('managerCount')]"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('managerNSGName')]",
            "apiVersion": "[variables('apiVersion')]",
            "location": "[variables('storageLocation')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "ssh",
                        "properties": {
                            "description": "Allow SSH",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 201,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "swarm-listen-port",
                        "properties": {
                            "description": "Allow 'swarm join' ingress to manager node",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "2377",
                            "sourceAddressPrefix": "[variables('subnetPrefix')]",
                            "destinationAddressPrefix": "[variables('subnetPrefix')]",
                            "access": "Allow",
                            "priority": 202,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "vxlan",
                        "properties": {
                            "description": "Allow VXLan connection between nodes",
                            "protocol": "Udp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "4789",
                            "sourceAddressPrefix": "[variables('subnetPrefix')]",
                            "destinationAddressPrefix": "[variables('subnetPrefix')]",
                            "access": "Allow",
                            "priority": 203,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "gossip",
                        "properties": {
                            "description": "Serf communication to gossip between nodes",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "7946",
                            "sourceAddressPrefix": "[variables('subnetPrefix')]",
                            "destinationAddressPrefix": "[variables('subnetPrefix')]",
                            "access": "Allow",
                            "priority": 204,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "docker-port",
                        "properties": {
                            "description": "Allow 'docker' ingress to manager node",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "2375",
                            "sourceAddressPrefix": "[variables('subnetPrefix')]",
                            "destinationAddressPrefix": "[variables('subnetPrefix')]",
                            "access": "Allow",
                            "priority": 205,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "ddc",
                        "properties": {
                            "description": "Allow UCP",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 206,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('managerVMNamePrefix'), 'nic-', copyIndex())]",
            "apiVersion": "[variables('apiVersion')]",
            "location": "[variables('storageLocation')]",
            "copy": {
                "name": "nicLoopNode",
                "count": "[variables('managerCount')]"
            },
            "properties": {
                "networkSecurityGroup": {
                    "id": "[variables('managerNSGID')]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipConfigNode",
                        "properties": {
                            "privateIPAllocationMethod": "dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('managerPublicIPAddressName'), 'ip-', copyIndex()))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            },
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('lbSSHID'),'/inboundNatRules/ssh')]"
                                },
                                {
                                    "id": "[concat(variables('lbSSHID'),'/inboundNatRules/ddc')]"
                                }
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('vnetID')]",
                "[variables('lbSSHID')]",
                "[variables('managerNSGID')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('managerVMNamePrefix'), copyIndex())]",
            "apiVersion": "[variables('apiVersion')]",
            "location": "[variables('storageLocation')]",
            "copy": {
                "name": "vmLoopNode",
                "count": "[variables('managerCount')]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('managerVMSize')]"
                },
                "osProfile": {
                    "computername": "[concat(variables('managerVMNamePrefix'), copyIndex())]",
                    "adminUsername": "[variables('adminUsername')]",
                    "customData": "[base64(concat('export ROLE=MANAGER; export PRIVATE_IP=', reference(resourceId('Microsoft.Network/networkInterfaces', concat(variables('managerVMNamePrefix'), 'nic-0'))).ipConfigurations[0].properties.privateIPAddress, '; export ACCOUNT_ID=', variables('accountID'), '; export APP_ID=', variables('adServicePrincipalAppID'), '; export APP_SECRET=', variables('adServicePrincipalAppSecret'), '; export TENANT_ID=', variables('adServicePrincipalTenantID'), ';export SUB_ID=',subscription().subscriptionId,'; export DOCKER_FOR_IAAS_VERSION=', variables('dockerForIAASVersion'), '; export REGION=', variables('storageLocation'),  '; export DDC_USER=', variables('ddcUser'), '; export DDC_PASS=', variables('ddcPass'), '; export RGROUP_NAME=',resourceGroup().name,'; export LB_NAME=lbPublicIPAddressName; export LB_SSH_IP=', reference(resourceId('Microsoft.Network/publicIPAddresses', variables('lbSSHPublicIPAddressName'))).ipAddress, '; docker run --restart=no -d -e ROLE=$ROLE -e REGION=$REGION -e ACCOUNT_ID=$ACCOUNT_ID -e PRIVATE_IP=$PRIVATE_IP -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /var/log:/var/log docker4x/init-azure:$DOCKER_FOR_IAAS_VERSION; docker run --restart=always -d -e ROLE=$ROLE -e REGION=$REGION -e ACCOUNT_ID=$ACCOUNT_ID -e PRIVATE_IP=$PRIVATE_IP -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker docker4x/guide-azure:$DOCKER_FOR_IAAS_VERSION', '; echo default: \"', variables('lbName'), '\">> /var/lib/docker/swarm/elb.config', '; echo \"', variables('lbName'), '\" > /var/lib/docker/swarm/lb_name', '; docker run --restart=no --rm -e ROLE=$ROLE -e REGION=$REGION -e ACCOUNT_ID=$ACCOUNT_ID -e APP_ID=$APP_ID -e APP_SECRET=$APP_SECRET -e TENANT_ID=$TENANT_ID -e RGROUP_NAME=$RGROUP_NAME -e UCP_ADMIN_USER=$DDC_USER -e UCP_ADMIN_PASSWORD=$DDC_PASS -e LB_NAME=$LB_NAME -e LB_IP=$LB_SSH_IP -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker docker4x/ddc-init-azure:$DOCKER_FOR_IAAS_VERSION; docker run -v /var/run/docker.sock:/var/run/docker.sock  -v /var/lib/docker/swarm:/var/lib/docker/swarm --name=editions_controller docker4x/controller:$DOCKER_FOR_IAAS_VERSION run --driver=azure --ad_app_id=', variables('adServicePrincipalAppID'), ' --ad_app_secret=',variables('adServicePrincipalAppSecret'),' --subscription_id=',subscription().subscriptionId,' --resource_group=',resourceGroup().name,' --log=4 --default_lb_name=',variables('lbName'),' --environment=AzurePublicCloud'))]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[variables('sshKeyPath')]",
                                    "keyData": "[variables('sshRSAPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "storageProfile": {
                    "osDisk": {
                        "name": "[concat(variables('managerVMNamePrefix'), 'vmssosdisk', copyIndex())]",
                        "image": {
                            "uri": "https://csedition.blob.core.windows.net/vhd/593bce62687695c685ea5a8417db5e4a-mobylinux.vhd"
                        },
                        "osType": "Linux",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "vhd": {
                            "uri": "[concat('https://csedition.blob.core.windows.net/vhds/', variables('groupName'), '-', uniqueString(resourceGroup().id), '-manager.vhd')]"
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('managerVMNamePrefix'), 'nic-', copyIndex()))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('https://', variables('uniqueStringArray')[0], variables('storageAccountSuffix'), '.blob.core.windows.net')]"
                    }
                }
            },
            "dependsOn": [
                "[variables('lbSSHID')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('managerVMNamePrefix'), 'nic-', copyIndex())]",
                "storageLoop"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "sku": {
                "name": "[variables('workerVMSize')]",
                "tier": "Standard",
                "capacity": "[variables('workerCount')]"
            },
            "name": "[variables('vmssName')]",
            "apiVersion": "[variables('apiVersion')]",
            "location": "[variables('storageLocation')]",
            "properties": {
                "overprovision": false,
                "upgradePolicy": {
                    "mode": "Manual"
                },
                "virtualMachineProfile": {
                    "storageProfile": {
                        "osDisk": {
                            "name": "[concat(variables('workerVMNamePrefix'), 'vmssosdisk', 0)]",
                            "image": {
                                "uri": "https://csedition.blob.core.windows.net/vhd/593bce62687695c685ea5a8417db5e4a-mobylinux.vhd"
                            },
                            "osType": "Linux",
                            "createOption": "FromImage",
                            "caching": "ReadWrite"
                        }
                    },
                    "osProfile": {
                        "computerNamePrefix": "[variables('workerVMNamePrefix')]",
                        "adminUsername": "[variables('adminUsername')]",
                        "customData": "[base64(concat('export ROLE=WORKER; export MANAGER_IP=', reference(resourceId('Microsoft.Network/networkInterfaces', concat(variables('managerVMNamePrefix'), 'nic-0'))).ipConfigurations[0].properties.privateIPAddress, '; export REGION=', variables('storageLocation'), '; export ACCOUNT_ID=', variables('accountID'), '; export DOCKER_FOR_IAAS_VERSION=', variables('dockerForIAASVersion'), '; export APP_ID=', variables('adServicePrincipalAppID'), '; export APP_SECRET=', variables('adServicePrincipalAppSecret'), '; export TENANT_ID=', variables('adServicePrincipalTenantID'), '; export DDC_USER=', variables('ddcUser'), '; export DDC_PASS=', variables('ddcPass'), '; export RGROUP_NAME=',resourceGroup().name,'; export LB_NAME=lbPublicIPAddressName; export LB_SSH_IP=', reference(resourceId('Microsoft.Network/publicIPAddresses', variables('lbSSHPublicIPAddressName'))).ipAddress, '; docker run --restart=no -d -e ROLE=$ROLE -e REGION=$REGION -e ACCOUNT_ID=$ACCOUNT_ID -e MANAGER_IP=$MANAGER_IP -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /var/log:/var/log docker4x/init-azure:$DOCKER_FOR_IAAS_VERSION; docker run --restart=no --rm -e ROLE=$ROLE -e REGION=$REGION -e ACCOUNT_ID=$ACCOUNT_ID -e APP_ID=$APP_ID -e APP_SECRET=$APP_SECRET -e TENANT_ID=$TENANT_ID -e RGROUP_NAME=$RGROUP_NAME -e UCP_ADMIN_USER=$DDC_USER -e UCP_ADMIN_PASSWORD=$DDC_PASS -e LB_NAME=$LB_NAME -e LB_IP=$LB_SSH_IP -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker docker4x/ddc-init-azure:$DOCKER_FOR_IAAS_VERSION; docker run --restart=always -d -e ROLE=$ROLE -e REGION=$REGION -e ACCOUNT_ID=$ACCOUNT_ID -e MANAGER_IP=$MANAGER_IP -e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker docker4x/guide-azure:$DOCKER_FOR_IAAS_VERSION'))]",
                        "linuxConfiguration": {
                            "disablePasswordAuthentication": true,
                            "ssh": {
                                "publicKeys": [
                                    {
                                        "path": "[variables('sshKeyPath')]",
                                        "keyData": "[variables('sshRSAPublicKey')]"
                                    }
                                ]
                            }
                        }
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "workerNodeNic",
                                "properties": {
                                    "primary": "true",
                                    "ipConfigurations": [
                                        {
                                            "name": "nicipconfig",
                                            "privateIPAllocationMethod": "dynamic",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[variables('subnetRef')]"
                                                },
                                                "loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[ variables('lbBackendAddressPoolID')]"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "diagnosticsProfile": {
                        "bootDiagnostics": {
                            "enabled": true,
                            "storageUri": "[concat('https://', variables('uniqueStringArray')[0], variables('storageAccountSuffix'), '.blob.core.windows.net')]"
                        }
                    }
                }
            },
            "dependsOn": [
                "[variables('vnetID')]",
                "[variables('lbID')]",
                "[resourceId('Microsoft.Compute/VirtualMachines',concat(variables('managerVMNamePrefix'), '0'))]",
                "storageLoop"
            ]
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('lbPublicIPAddressName')]",
            "apiVersion": "[variables('apiVersion')]",
            "location": "[variables('storageLocation')]",
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('lbName')]",
            "apiVersion": "[variables('apiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "default",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('lbPublicIPAddressName'))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "default"
                    }
                ],
                "probes": [
                    {
                        "name": "default",
                        "properties": {
                            "protocol": "tcp",
                            "port": 2375,
                            "intervalInSeconds": "10",
                            "numberOfProbes": "2"
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('lbPublicIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('lbSSHPublicIPAddressName')]",
            "apiVersion": "[variables('apiVersion')]",
            "location": "[variables('storageLocation')]",
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('lbSSHName')]",
            "apiVersion": "[variables('apiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "default",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('lbSSHPublicIPAddressName'))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "default"
                    }
                ],
                "inboundNatRules": [
                    {
                        "name": "ssh",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('lbSSHName')),'/frontendIPConfigurations/default')]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 22,
                            "backendPort": 22,
                            "enableFloatingIP": false
                        }
                    },
                    {
                        "name": "ddc",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('lbSSHName')),'/frontendIPConfigurations/default')]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 443,
                            "backendPort": 443,
                            "enableFloatingIP": false
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('lbSSHPublicIPAddressName'))]"
            ]
        }
    ],
    "outputs": {
        "SSH": {
            "type": "String",
            "value": "[concat('ssh docker@', reference(resourceId('Microsoft.Network/publicIPAddresses', variables('lbSSHPublicIPAddressName'))).ipAddress)]"
        },
        "DefaultDNSTarget": {
            "type": "String",
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('lbPublicIPAddressName'))).ipAddress]"
        },
        "DDCLoginURL": {
            "type": "String",
            "value": "[concat('https://', reference(resourceId('Microsoft.Network/publicIPAddresses', variables('lbSSHPublicIPAddressName'))).ipAddress)]"
        },
        "DDCUsername": {
            "type": "String",
            "value": "[variables('ddcUser')]"
        }
    }
}