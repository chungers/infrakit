outputs:
- name: externalIp
  value: $(ref.docker-external-ip.address)
- name: zone
  value: europe-west1-d
- name: ssh
  value: "You can ssh into the Swarm with: gcloud compute ssh --zone europe-west1-d docker-manager-1"

resources:
- name: docker-bootstrap
  type: compute.v1.instance
  properties:
    zone: europe-west1-d
    machineType: zones/europe-west1-d/machineTypes/g1-small
    disks:
    - type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: projects/debian-cloud/global/images/family/debian-8
        diskSizeGb: 200
    networkInterfaces:
    - network: $(ref.docker-network.selfLink)
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    metadata:
      items:
      - key: manager-script
        value: |
          #!/bin/sh

          set -ex

          echo This is a leader node

          export DOCKER_FOR_IAAS_VERSION="gcp-v1.13.1-latest"
          export ACCOUNT_ID="$(curl -sH 'Metadata-Flavor: Google' http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/email)"
          export REGION="europe-west1"
          export CHANNEL="beta"
          export NODE_TYPE="leader"

          shell_image="docker4x/shell-gcp:latest"
          guide_image="docker4x/guide-gcp:latest"
          lb_image="docker4x/l4controller-gcp:latest"
          infrakit_image="docker4x/infrakit-gcp:latest"

          docker_run='docker run --label com.docker.editions.system --log-driver=json-file'
          docker_daemon="$docker_run --rm -d"
          docker_socket='-v /var/run/docker.sock:/var/run/docker.sock'
          docker_cli='-v /usr/bin/docker:/usr/bin/docker'

          function dockerPull {
            for i in $(seq 1 60); do docker pull $1 && break || sleep 1; done
          }


          echo Initialize Swarm

          docker node inspect self >/dev/null 2>&1 || docker swarm init --advertise-addr eth0:2377 --listen-addr eth0:2377
          docker node inspect self

          dockerPull ${guide_image}

          $docker_run --rm \
            -e NODE_TYPE \
            -e ACCOUNT_ID \
            -e REGION \
            $docker_socket \
            $docker_cli \
            $guide_image \
            /usr/bin/buoy.sh "identify"

          $docker_run --rm \
            -e NODE_TYPE \
            -e DOCKER_FOR_IAAS_VERSION \
            -e ACCOUNT_ID \
            -e REGION \
            -e CHANNEL \
            $docker_socket \
            $docker_cli \
            $guide_image \
            /usr/bin/buoy.sh "swarm:init"


          echo Start infrakit

          dockerPull ${infrakit_image}
          $docker_daemon --name=infrakit $docker_socket $docker_cli $infrakit_image
          echo Start sshd

          dockerPull ${shell_image}

          docker inspect etc >/dev/null 2>&1 || $docker_run --name=etc -v /etc $shell_image true
          $docker_run --volumes-from=etc $shell_image /usr/bin/ssh-keygen.sh

          $docker_daemon --name=accounts \
            -v /dev/log:/dev/log \
            -v /home:/home \
            --volumes-from=etc \
            $shell_image \
            /usr/bin/google_accounts_daemon

          $docker_daemon --name=ipforwarding \
            -v /dev/log:/dev/log \
            --cap-add=NET_ADMIN \
            --net=host \
            $shell_image \
            /usr/bin/google_ip_forwarding_daemon -d

          $docker_daemon --name=shell \
            -p 22:22 \
            $docker_socket \
            $docker_cli \
            -v /var/log:/var/log \
            -v /home:/home \
            --volumes-from=etc \
            --net=host \
            $shell_image

          echo Start guide

          dockerPull ${guide_image}
          $docker_daemon --name=guide \
            -e NODE_TYPE \
            -e RUN_VACUUM="yes" \
            -e DOCKER_FOR_IAAS_VERSION \
            -e ACCOUNT_ID \
            -e REGION \
            -e CHANNEL \
            $docker_socket \
            $docker_cli \
            $guide_image


          echo Start Load Balancer Listener

          dockerPull ${lb_image}
          $docker_daemon --name=lbcontroller $docker_socket $lb_image run --log=5
      - key: startup-script
        value: |
          #!/bin/sh

          export CLOUDSDK_CORE_PROJECT=test-project
          export CLOUDSDK_COMPUTE_ZONE=europe-west1-d

          curl -sfH 'Metadata-Flavor: Google' http://metadata.google.internal/computeMetadata/v1/instance/attributes/manager-script > /start.sh

          echo Wait for the base disk image
          while :; do gcloud compute images describe docker-disk-image-latest && break || sleep 1; done

          echo Wait for the network
          while :; do gcloud compute networks describe docker-network && break || sleep 1; done

          gcloud compute disks describe docker-manager-1
          if [ $? -eq 0 ]; then
            gcloud compute instances create docker-manager-1 \
              --machine-type g1-small \
              --network projects/test-project/global/networks/docker-network \
              --tags swarm,swarm-manager \
              --scopes https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/trace.append,https://www.googleapis.com/auth/compute,https://www.googleapis.com/auth/cloudruntimeconfig \
              --metadata infrakit--group=managers \
              --metadata-from-file startup-script=/start.sh \
              --disk=boot=yes,device-name=docker-manager-1,name=docker-manager-1
          else
            gcloud compute instances create docker-manager-1 \
              --machine-type g1-small \
              --network projects/test-project/global/networks/docker-network \
              --image projects/test-project/global/images/docker-disk-image-latest \
              --tags swarm,swarm-manager \
              --scopes https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/trace.append,https://www.googleapis.com/auth/compute,https://www.googleapis.com/auth/cloudruntimeconfig \
              --metadata infrakit--group=managers \
              --metadata-from-file startup-script=/start.sh \
              --boot-disk-size 100GB \
              --boot-disk-type pd-standard \
              --boot-disk-device-name docker-manager-1 \
              --no-boot-disk-auto-delete
          fi

          echo Wait for the target pool
          while :; do gcloud compute target-pools describe --region=europe-west1 docker-lb-pool && break || sleep 1; done

          gcloud compute target-pools add-instances \
            docker-lb-pool \
            --instances=docker-manager-1 \
            --instances-zone europe-west1-d
    scheduling:
      preemptible: false
      onHostMaintenance: TERMINATE
      automaticRestart: false
    serviceAccounts:
    - scopes:
      - https://www.googleapis.com/auth/compute

- name: docker-config
  type: runtimeconfig.v1beta1.config
  properties:
    config: docker-config

- name: docker-manager-infrakit
  type: runtimeconfig.v1beta1.variable
  properties:
    parent: $(ref.docker-config.name)
    variable: infrakit
    text: |
      [
        {
          "Plugin": "group",
          "Properties": {
            "ID": "managers",
            "Properties": {
              "Allocation": {
                "LogicalIDS": ["docker-manager-1","docker-manager-2","docker-manager-3"]
              },
              "Instance": {
                "Plugin": "instance-gcp",
                "Properties": {
                  "MachineType": "g1-small",
                  "Network": "$(ref.docker-network.selfLink)",
                  "NamePrefix": "docker-manager",
                  "DiskSizeMb": 100,
                  "DiskType": "pd-standard",
                  "DiskImage": "$(ref.docker-disk-image-latest.selfLink)",
                  "TargetPools": ["docker-lb-pool"],
                  "Tags": [
                    "swarm",
                    "swarm-manager"
                  ],
                  "Scopes": [
                    "https://www.googleapis.com/auth/devstorage.read_only",
                    "https://www.googleapis.com/auth/logging.write",
                    "https://www.googleapis.com/auth/monitoring.write",
                    "https://www.googleapis.com/auth/service.management.readonly",
                    "https://www.googleapis.com/auth/servicecontrol",
                    "https://www.googleapis.com/auth/trace.append",
                    "https://www.googleapis.com/auth/compute",
                    "https://www.googleapis.com/auth/cloudruntimeconfig"
                  ]
                }
              },
              "Flavor": {
                "Plugin": "flavor-combo",
                "Properties": {
                  "Flavors": [
                    {
                      "Plugin": "flavor-vanilla",
                      "Properties": {
                        "Init": [
                          "#!/bin/sh","","set -ex","","echo This is a manager node","","export DOCKER_FOR_IAAS_VERSION=\"gcp-v1.13.1-latest\"","export ACCOUNT_ID=\"$(curl -sH 'Metadata-Flavor: Google' http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/email)\"","export REGION=\"europe-west1\"","export CHANNEL=\"beta\"","export NODE_TYPE=\"manager\"","","shell_image=\"docker4x/shell-gcp:latest\"","guide_image=\"docker4x/guide-gcp:latest\"","lb_image=\"docker4x/l4controller-gcp:latest\"","infrakit_image=\"docker4x/infrakit-gcp:latest\"","","docker_run='docker run --label com.docker.editions.system --log-driver=json-file'","docker_daemon=\"$docker_run --rm -d\"","docker_socket='-v /var/run/docker.sock:/var/run/docker.sock'","docker_cli='-v /usr/bin/docker:/usr/bin/docker'","","function dockerPull {","  for i in $(seq 1 60); do docker pull $1 && break || sleep 1; done","}","","","echo Start infrakit","","dockerPull ${infrakit_image}","$docker_daemon --name=infrakit $docker_socket $docker_cli $infrakit_image","echo Start sshd","","dockerPull ${shell_image}","","docker inspect etc >/dev/null 2>&1 || $docker_run --name=etc -v /etc $shell_image true","$docker_run --volumes-from=etc $shell_image /usr/bin/ssh-keygen.sh","","$docker_daemon --name=accounts \\","  -v /dev/log:/dev/log \\","  -v /home:/home \\","  --volumes-from=etc \\","  $shell_image \\","  /usr/bin/google_accounts_daemon","","$docker_daemon --name=ipforwarding \\","  -v /dev/log:/dev/log \\","  --cap-add=NET_ADMIN \\","  --net=host \\","  $shell_image \\","  /usr/bin/google_ip_forwarding_daemon -d","","$docker_daemon --name=shell \\","  -p 22:22 \\","  $docker_socket \\","  $docker_cli \\","  -v /var/log:/var/log \\","  -v /home:/home \\","  --volumes-from=etc \\","  --net=host \\","  $shell_image","","echo Start guide","","dockerPull ${guide_image}","$docker_daemon --name=guide \\","  -e NODE_TYPE \\","  -e RUN_VACUUM=\"yes\" \\","  -e DOCKER_FOR_IAAS_VERSION \\","  -e ACCOUNT_ID \\","  -e REGION \\","  -e CHANNEL \\","  $docker_socket \\","  $docker_cli \\","  $guide_image","","","echo Start Load Balancer Listener","","dockerPull ${lb_image}","$docker_daemon --name=lbcontroller $docker_socket $lb_image run --log=5",""
                        ]
                      }
                    },
                    {
                      "Plugin": "flavor-swarm/manager",
                      "Properties": {}
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "Plugin": "group",
          "Properties": {
            "ID": "workers",
            "Properties": {
              "Allocation": {
                "Size": 1
              },
              "Instance": {
                "Plugin": "instance-gcp",
                "Properties": {
                  "MachineType": "g1-small",
                  "Network": "$(ref.docker-network.selfLink)",
                  "NamePrefix": "docker-worker",
                  "DiskSizeMb": 100,
                  "DiskType": "pd-standard",
                  "DiskImage": "$(ref.docker-disk-image-latest.selfLink)",
                  "TargetPools": ["docker-lb-pool"],
                  "Tags": [
                    "swarm",
                    "swarm-worker"
                  ],
                  "Scopes": [
                    "https://www.googleapis.com/auth/devstorage.read_only",
                    "https://www.googleapis.com/auth/logging.write",
                    "https://www.googleapis.com/auth/monitoring.write",
                    "https://www.googleapis.com/auth/service.management.readonly",
                    "https://www.googleapis.com/auth/servicecontrol",
                    "https://www.googleapis.com/auth/trace.append"
                  ]
                }
              },
              "Flavor": {
                "Plugin": "flavor-combo",
                "Properties": {
                  "Flavors": [
                    {
                      "Plugin": "flavor-vanilla",
                      "Properties": {
                        "Init": [
                          "#!/bin/sh","","set -ex","","echo This is a worker node","","export DOCKER_FOR_IAAS_VERSION=\"gcp-v1.13.1-latest\"","export ACCOUNT_ID=\"$(curl -sH 'Metadata-Flavor: Google' http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/email)\"","export REGION=\"europe-west1\"","export CHANNEL=\"beta\"","export NODE_TYPE=\"worker\"","","shell_image=\"docker4x/shell-gcp:latest\"","guide_image=\"docker4x/guide-gcp:latest\"","lb_image=\"docker4x/l4controller-gcp:latest\"","infrakit_image=\"docker4x/infrakit-gcp:latest\"","","docker_run='docker run --label com.docker.editions.system --log-driver=json-file'","docker_daemon=\"$docker_run --rm -d\"","docker_socket='-v /var/run/docker.sock:/var/run/docker.sock'","docker_cli='-v /usr/bin/docker:/usr/bin/docker'","","function dockerPull {","  for i in $(seq 1 60); do docker pull $1 && break || sleep 1; done","}","","echo Start sshd","","dockerPull ${shell_image}","","docker inspect etc >/dev/null 2>&1 || $docker_run --name=etc -v /etc $shell_image true","$docker_run --volumes-from=etc $shell_image /usr/bin/ssh-keygen.sh","","$docker_daemon --name=accounts \\","  -v /dev/log:/dev/log \\","  -v /home:/home \\","  --volumes-from=etc \\","  $shell_image \\","  /usr/bin/google_accounts_daemon","","$docker_daemon --name=ipforwarding \\","  -v /dev/log:/dev/log \\","  --cap-add=NET_ADMIN \\","  --net=host \\","  $shell_image \\","  /usr/bin/google_ip_forwarding_daemon -d","","$docker_daemon --name=shell \\","  -p 22:22 \\","  $docker_socket \\","  $docker_cli \\","  -v /var/log:/var/log \\","  -v /home:/home \\","  --volumes-from=etc \\","  --net=host \\","  $shell_image","","echo Start guide","","dockerPull ${guide_image}","$docker_daemon --name=guide \\","  -e NODE_TYPE \\","  -e RUN_VACUUM=\"yes\" \\","  -e DOCKER_FOR_IAAS_VERSION \\","  -e ACCOUNT_ID \\","  -e REGION \\","  -e CHANNEL \\","  $docker_socket \\","  $docker_cli \\","  $guide_image","",""
                        ]
                      }
                    },
                    {
                      "Plugin": "flavor-swarm/worker",
                      "Properties": {}
                    }
                  ]
                }
              }
            }
          }
        }
      ]

- name: docker-disk-image-latest
  type: compute.v1.image
  properties:
    family: docker
    rawDisk:
      source: https://storage.googleapis.com/docker-for-gcp-images/latest/gce.img.tar.gz

- name: docker-external-ip
  type: compute.v1.address
  properties:
    region: europe-west1

- name: docker-lb-pool
  type: compute.v1.targetPool
  properties:
    region: europe-west1
    sessionAffinity: NONE
    instances: []

- name: docker-lb-forward
  type: compute.v1.forwardingRule
  properties:
    region: europe-west1
    IPProtocol: TCP
    portRange: 80-65535
    IPAddress: $(ref.docker-external-ip.address)
    target: $(ref.docker-lb-pool.selfLink)

- name: docker-network
  type: compute.v1.network
  properties:
    autoCreateSubnetworks: true

- name: docker-allow-ssh
  type: compute.v1.firewall
  properties:
    network: $(ref.docker-network.selfLink)
    sourceRanges: [0.0.0.0/0]
    targetTags:
    - swarm-manager
    allowed:
    - IPProtocol: tcp
      ports: [22]

- name: docker-allow-lb
  type: compute.v1.firewall
  properties:
    network: $(ref.docker-network.selfLink)
    sourceRanges: [0.0.0.0/0]
    allowed:
    - IPProtocol: tcp
      ports: [80]

- name: docker-allow-internal
  type: compute.v1.firewall
  properties:
    network: $(ref.docker-network.selfLink)
    sourceRanges: [10.128.0.0/9]
    allowed:
    - IPProtocol: tcp
      ports: [0-65535]
    - IPProtocol: udp
      ports: [0-65535]
