outputs:
- name: externalIp
  value: $(ref.docker-external-ip.address)
- name: leaderIp
  value: $(ref.docker-manager-1.networkInterfaces[0].accessConfigs[0].natIP)
- name: zone
  value: europe-west1-d
- name: ssh
  value: "You can ssh into the Swarm with: gcloud compute ssh --zone europe-west1-d docker-manager-1"

resources:
- name: docker-manager-1
  type: compute.v1.instance
  properties:
    zone: europe-west1-d
    machineType: zones/europe-west1-d/machineTypes/g1-small
    tags:
      items: [swarm, swarm-manager]
    disks:
    - type: PERSISTENT
      boot: true
      autoDelete: false
      initializeParams:
        sourceImage: $(ref.docker-disk-image.selfLink)
        diskSizeGb: 100
        diskType: projects/test-project/zones/europe-west1-d/diskTypes/pd-standard
    networkInterfaces:
    - network: $(ref.docker-network.selfLink)
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    metadata:
      items:
      - key: infrakit--group
        value: managers
      - key: startup-script
        value: |
          #!/bin/sh

          set -ex

          echo This is a leader node

          shell_image="docker4x/shell-gcp:latest"
          guide_image="docker4x/guide-gcp:latest"
          lb_image="docker4x/l4controller-gcp:latest"
          infrakit_image="docker4x/infrakit-gcp:latest"

          docker_run='docker run --label com.docker.editions.system --log-driver=json-file'
          docker_daemon="$docker_run --rm -d"
          docker_socket='-v /var/run/docker.sock:/var/run/docker.sock'
          docker_cli='-v /usr/bin/docker:/usr/bin/docker'

          function dockerPull {
            for i in $(seq 1 60); do docker pull $1 && break || sleep 1; done
          }


          echo Initialize Swarm

          docker node inspect self || docker swarm init --advertise-addr eth0:2377 --listen-addr eth0:2377
          docker node inspect self | jq -r '.[0].ManagerStatus.Leader'

          echo Start infrakit

          dockerPull ${infrakit_image}
          $docker_daemon --name=infrakit $docker_socket $docker_cli $infrakit_image /run.sh
          echo Start sshd

          dockerPull ${shell_image}

          docker inspect etc >/dev/null 2>&1 || $docker_run --name=etc -v /etc $shell_image true
          $docker_run --volumes-from=etc $shell_image /usr/bin/ssh-keygen.sh

          $docker_daemon --name=accounts \
            -v /dev/log:/dev/log \
            -v /home:/home \
            --volumes-from=etc \
            $shell_image \
            /usr/bin/google_accounts_daemon

          $docker_daemon --name=ipforwarding \
            -v /dev/log:/dev/log \
            --cap-add=NET_ADMIN \
            --net=host \
            $shell_image \
            /usr/bin/google_ip_forwarding_daemon -d

          $docker_daemon --name=shell \
            -p 22:22 \
            $docker_socket \
            $docker_cli \
            -v /var/log:/var/log \
            -v /home:/home \
            --volumes-from=etc \
            --net=host \
            $shell_image

          echo Start guide

          dockerPull ${guide_image}
          $docker_daemon --name=guide \
            -e RUN_VACUUM="yes" \
            $docker_socket \
            $docker_cli \
            $guide_image


          echo Start Load Balancer Listener

          dockerPull ${lb_image}
          $docker_daemon --name=lbcontroller $docker_socket $lb_image run --log=5
    scheduling:
      preemptible: false
      onHostMaintenance: TERMINATE
      automaticRestart: false
    serviceAccounts:
    - scopes:
      - https://www.googleapis.com/auth/devstorage.read_only
      - https://www.googleapis.com/auth/logging.write
      - https://www.googleapis.com/auth/monitoring.write
      - https://www.googleapis.com/auth/service.management.readonly
      - https://www.googleapis.com/auth/servicecontrol
      - https://www.googleapis.com/auth/trace.append
      - https://www.googleapis.com/auth/compute
      - https://www.googleapis.com/auth/cloudruntimeconfig

- name: docker-config
  type: runtimeconfig.v1beta1.config
  properties:
    config: docker-config

- name: docker-manager-infrakit
  type: runtimeconfig.v1beta1.variable
  properties:
    parent: $(ref.docker-config.name)
    variable: infrakit
    text: |
      {
        "managers": {
          "ID": "managers",
          "Properties": {
            "Allocation": {
              "LogicalIDS": ["docker-manager-1","docker-manager-2","docker-manager-3"]
            },
            "Instance": {
              "Plugin": "instance-gcp",
              "Properties": {
                "MachineType": "g1-small",
                "Network": "$(ref.docker-network.selfLink)",
                "NamePrefix": "docker-manager",
                "DiskSizeMb": 100,
                "DiskType": "pd-standard",
                "DiskImage": "$(ref.docker-disk-image.selfLink)",
                "TargetPool": "docker-target-pool",
                "Tags": ["swarm", "swarm-manager"],
                "Scopes": [
                  "https://www.googleapis.com/auth/devstorage.read_only",
                  "https://www.googleapis.com/auth/logging.write",
                  "https://www.googleapis.com/auth/monitoring.write",
                  "https://www.googleapis.com/auth/service.management.readonly",
                  "https://www.googleapis.com/auth/servicecontrol",
                  "https://www.googleapis.com/auth/trace.append",
                  "https://www.googleapis.com/auth/compute",
                  "https://www.googleapis.com/auth/cloudruntimeconfig"
                ]
              }
            },
            "Flavor": {
              "Plugin": "flavor-combo",
              "Properties": {
                "Flavors": [
                  {
                    "Plugin": "flavor-vanilla",
                    "Properties": {
                      "Init": [ "#!/bin/sh","","set -ex","","echo This is a manager node","","shell_image=\"docker4x/shell-gcp:latest\"","guide_image=\"docker4x/guide-gcp:latest\"","lb_image=\"docker4x/l4controller-gcp:latest\"","infrakit_image=\"docker4x/infrakit-gcp:latest\"","","docker_run='docker run --label com.docker.editions.system --log-driver=json-file'","docker_daemon=\"$docker_run --rm -d\"","docker_socket='-v /var/run/docker.sock:/var/run/docker.sock'","docker_cli='-v /usr/bin/docker:/usr/bin/docker'","","function dockerPull {","  for i in $(seq 1 60); do docker pull $1 && break || sleep 1; done","}","","","echo Start infrakit","","dockerPull ${infrakit_image}","$docker_daemon --name=infrakit $docker_socket $docker_cli $infrakit_image /run.sh","echo Start sshd","","dockerPull ${shell_image}","","docker inspect etc >/dev/null 2>&1 || $docker_run --name=etc -v /etc $shell_image true","$docker_run --volumes-from=etc $shell_image /usr/bin/ssh-keygen.sh","","$docker_daemon --name=accounts \\","  -v /dev/log:/dev/log \\","  -v /home:/home \\","  --volumes-from=etc \\","  $shell_image \\","  /usr/bin/google_accounts_daemon","","$docker_daemon --name=ipforwarding \\","  -v /dev/log:/dev/log \\","  --cap-add=NET_ADMIN \\","  --net=host \\","  $shell_image \\","  /usr/bin/google_ip_forwarding_daemon -d","","$docker_daemon --name=shell \\","  -p 22:22 \\","  $docker_socket \\","  $docker_cli \\","  -v /var/log:/var/log \\","  -v /home:/home \\","  --volumes-from=etc \\","  --net=host \\","  $shell_image","","echo Start guide","","dockerPull ${guide_image}","$docker_daemon --name=guide \\","  -e RUN_VACUUM=\"yes\" \\","  $docker_socket \\","  $docker_cli \\","  $guide_image","","","echo Start Load Balancer Listener","","dockerPull ${lb_image}","$docker_daemon --name=lbcontroller $docker_socket $lb_image run --log=5","" ]
                    }
                  },
                  {
                    "Plugin": "flavor-swarm/manager",
                    "Properties": {}
                  }
                ]
              }
            }
          }
        },
        "workers": {
          "ID": "workers",
          "Properties": {
            "Allocation": {
              "Size": 1
            },
            "Instance": {
              "Plugin": "instance-gcp",
              "Properties": {
                "MachineType": "g1-small",
                "Network": "$(ref.docker-network.selfLink)",
                "NamePrefix": "docker-worker",
                "DiskSizeMb": 100,
                "DiskType": "pd-standard",
                "DiskImage": "$(ref.docker-disk-image.selfLink)",
                "TargetPool": "docker-target-pool",
                "Tags": ["swarm", "swarm-worker"],
                "Scopes": [
                  "https://www.googleapis.com/auth/devstorage.read_only",
                  "https://www.googleapis.com/auth/logging.write",
                  "https://www.googleapis.com/auth/monitoring.write",
                  "https://www.googleapis.com/auth/service.management.readonly",
                  "https://www.googleapis.com/auth/servicecontrol",
                  "https://www.googleapis.com/auth/trace.append"
                ]
              }
            },
            "Flavor": {
              "Plugin": "flavor-combo",
              "Properties": {
                "Flavors": [
                  {
                    "Plugin": "flavor-vanilla",
                    "Properties": {
                      "Init": [ "#!/bin/sh","","set -ex","","echo This is a worker node","","shell_image=\"docker4x/shell-gcp:latest\"","guide_image=\"docker4x/guide-gcp:latest\"","lb_image=\"docker4x/l4controller-gcp:latest\"","infrakit_image=\"docker4x/infrakit-gcp:latest\"","","docker_run='docker run --label com.docker.editions.system --log-driver=json-file'","docker_daemon=\"$docker_run --rm -d\"","docker_socket='-v /var/run/docker.sock:/var/run/docker.sock'","docker_cli='-v /usr/bin/docker:/usr/bin/docker'","","function dockerPull {","  for i in $(seq 1 60); do docker pull $1 && break || sleep 1; done","}","","echo Start sshd","","dockerPull ${shell_image}","","docker inspect etc >/dev/null 2>&1 || $docker_run --name=etc -v /etc $shell_image true","$docker_run --volumes-from=etc $shell_image /usr/bin/ssh-keygen.sh","","$docker_daemon --name=accounts \\","  -v /dev/log:/dev/log \\","  -v /home:/home \\","  --volumes-from=etc \\","  $shell_image \\","  /usr/bin/google_accounts_daemon","","$docker_daemon --name=ipforwarding \\","  -v /dev/log:/dev/log \\","  --cap-add=NET_ADMIN \\","  --net=host \\","  $shell_image \\","  /usr/bin/google_ip_forwarding_daemon -d","","$docker_daemon --name=shell \\","  -p 22:22 \\","  $docker_socket \\","  $docker_cli \\","  -v /var/log:/var/log \\","  -v /home:/home \\","  --volumes-from=etc \\","  --net=host \\","  $shell_image","","echo Start guide","","dockerPull ${guide_image}","$docker_daemon --name=guide \\","  -e RUN_VACUUM=\"yes\" \\","  $docker_socket \\","  $docker_cli \\","  $guide_image","","" ]
                    }
                  },
                  {
                    "Plugin": "flavor-swarm/worker",
                    "Properties": {}
                  }
                ]
              }
            }
          }
        }
      }

- name: docker-disk-image
  type: compute.v1.image
  properties:
    family: docker
    rawDisk:
      source: https://storage.googleapis.com/docker-for-gcp-images/latest/gce.img.tar.gz

- name: docker-external-ip
  type: compute.v1.address
  properties:
    region: europe-west1

- name: docker-target-pool
  type: compute.v1.targetPool
  properties:
    region: europe-west1
    sessionAffinity: NONE
    instances: [$(ref.docker-manager-1.selfLink)]

- name: docker-lb-forward
  type: compute.v1.forwardingRule
  properties:
    region: europe-west1
    IPProtocol: TCP
    portRange: 80-65535
    IPAddress: $(ref.docker-external-ip.address)
    target: $(ref.docker-target-pool.selfLink)

- name: docker-network
  type: compute.v1.network
  properties:
    autoCreateSubnetworks: true

- name: docker-allow-ssh
  type: compute.v1.firewall
  properties:
    network: $(ref.docker-network.selfLink)
    sourceRanges: [0.0.0.0/0]
    targetTags:
    - swarm-manager
    allowed:
    - IPProtocol: tcp
      ports: [22]

- name: docker-allow-lb
  type: compute.v1.firewall
  properties:
    network: $(ref.docker-network.selfLink)
    sourceRanges: [0.0.0.0/0]
    allowed:
    - IPProtocol: tcp
      ports: [80]

- name: docker-allow-internal
  type: compute.v1.firewall
  properties:
    network: $(ref.docker-network.selfLink)
    sourceRanges: [10.128.0.0/9]
    allowed:
    - IPProtocol: tcp
      ports: [0-65535]
    - IPProtocol: udp
      ports: [0-65535]
