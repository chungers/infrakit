Base64(Join('', [
    "#!/bin/sh\n",

    "export EXTERNAL_LB='", Ref("ExternalLoadBalancer"), "'\n",
    "export DOCKER_FOR_IAAS_VERSION='", FindInMap("DockerForAWS", "version", "forAws"), "'\n",
    "export LOCAL_IP=$(wget -qO- http://169.254.169.254/latest/meta-data/local-ipv4)\n",
    "export ENABLE_CLOUDWATCH_LOGS='", Ref("EnableCloudWatchLogs"), "'\n",
    "export AWS_REGION='", Ref("AWS::Region"), "'\n",
    "export MANAGER_SECURITY_GROUP_ID='", Ref("ManagerVpcSG"), "'\n",
    "export WORKER_SECURITY_GROUP_ID='", Ref("NodeVpcSG"), "'\n",
    "export DYNAMODB_TABLE='", Ref("SwarmDynDBTable"), "'\n",
    "export STACK_NAME='", Ref("AWS::StackName"), "'\n",
    "export STACK_ID='", Ref("AWS::StackId"), "'\n",
    "export ACCOUNT_ID='", Ref("AWS::AccountId"), "'\n",
    "export VPC_ID='", Ref("Vpc"), "'\n",
    "export SWARM_QUEUE='", Ref("SwarmSQS"), "'\n",
    "export CLEANUP_QUEUE='", Ref("SwarmSQSCleanup"), "'\n",
    "export RUN_VACUUM='", Ref("EnableSystemPrune"), "'\n",
    "export LOG_GROUP_NAME='", Join("-", [Ref("AWS::StackName"), "lg"]), "'\n",
    "export NODE_TYPE='worker'\n",
    "export INSTANCE_NAME='NodeAsg'\n"

    "if [ $ENABLE_CLOUDWATCH_LOGS == 'yes' ] ; then \n",
    "  echo '{\"experimental\": true, \"log-driver\": \"awslogs\",",
    "\"log-opts\": {\"awslogs-group\":\"$LOG_GROUP_NAME",
    "\", \"tag\": \"{{.Name}}-{{.ID}}\" }}' > /etc/docker/daemon.json \n",
    "else\n",
    "  echo '{\"experimental\": true }' > /etc/docker/daemon.json \n",
    "fi\n",

    "chown -R docker /home/docker/\n",
    "chgrp -R docker /home/docker/\n",
    "rc-service docker restart\n",
    "sleep 5\n",

    "docker run --label com.docker.editions.system --log-driver=json-file --restart=no -d ",
    "-e DYNAMODB_TABLE=$DYNAMODB_TABLE ",
    "-e NODE_TYPE=$NODE_TYPE ",
    "-e REGION=$AWS_REGION ",
    "-e STACK_NAME=$STACK_NAME ",
    "-e STACK_ID=\"$STACK_ID\" ",
    "-e ACCOUNT_ID=$ACCOUNT_ID ",
    "-e INSTANCE_NAME=$INSTANCE_NAME ",
    "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ",
    "-v /var/run/docker.sock:/var/run/docker.sock ",
    "-v /usr/bin/docker:/usr/bin/docker ",
    "-v /var/log:/var/log ",
    "docker4x/init-aws:$DOCKER_FOR_IAAS_VERSION\n",

    "docker run --label com.docker.editions.system --log-driver=json-file ",
    "--name=guide-aws --restart=always -d ",
    "-e DYNAMODB_TABLE=$DYNAMODB_TABLE ",
    "-e NODE_TYPE=$NODE_TYPE ",
    "-e REGION=$AWS_REGION ",
    "-e STACK_NAME=$STACK_NAME ",
    "-e INSTANCE_NAME=$INSTANCE_NAME ",
    "-e VPC_ID=$VPC_ID ",
    "-e STACK_ID=\"$STACK_ID\" ",
    "-e ACCOUNT_ID=$ACCOUNT_ID ",
    "-e SWARM_QUEUE=\"$SWARM_QUEUE\" ",
    "-e CLEANUP_QUEUE=\"$CLEANUP_QUEUE\" ",
    "-e RUN_VACUUM=$RUN_VACUUM ",
    "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ",
    "-v /var/run/docker.sock:/var/run/docker.sock ",
    "-v /usr/bin/docker:/usr/bin/docker ",
    "docker4x/guide-aws:$DOCKER_FOR_IAAS_VERSION\n",

    "docker volume create --name sshkey\n",

    "docker run --label com.docker.editions.system --log-driver=json-file -ti --rm ",
    "--user root ",
    "-v sshkey:/etc/ssh ",
    "--entrypoint ssh-keygen ",
    "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION ",
    "-A\n",

    "docker run --label com.docker.editions.system --log-driver=json-file ",
    "--name=shell-aws --restart=always -d -p 22:22 ",
    "-v /home/docker/:/home/docker/ ",
    "-v /var/run/docker.sock:/var/run/docker.sock ",
    "-v /var/lib/docker/swarm/lb_name:/var/lib/docker/swarm/lb_name:ro ",
    "-v /var/lib/docker/swarm/elb.config:/var/lib/docker/swarm/elb.config ",
    "-v /usr/bin/docker:/usr/bin/docker ",
    "-v /var/log:/var/log ",
    "-v sshkey:/etc/ssh ",
    "-v /etc/passwd:/etc/passwd:ro ",
    "-v /etc/shadow:/etc/shadow:ro ",
    "-v /etc/group:/etc/group:ro ",
    "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION\n",

]))
