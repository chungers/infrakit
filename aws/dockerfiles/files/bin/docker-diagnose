#!/bin/sh

set -e

DIAGNOSTICS_MAGIC_PORT=44554

platform()
{
	# TODO: This will need to be changed if the current configuration of
	# system containers are not invoked via 'docker run' anymore
	#
	# (and/or might be more elegant to pass in the platform via environment
	# variables, etc.)
	PLATFORM=$(docker images | grep aws)
	if [ $? -eq 0 ]; then
		echo "aws"
	else
		echo "azure"
	fi
}

node_hostnames()
{
	docker node inspect $(docker node ls -q) | jq -r '.[] | .Description.Hostname'
}

azure_resolver()
{
	# Sample /etc/resolv.conf on Azure:
	#
	# # Generated by dhcpcd from eth0.dhcp
	# # /etc/resolv.conf.head can replace this line
	# domain zopqyteo2tpuxc1cyzroivpijh.gx.internal.cloudapp.net
	# nameserver 168.63.129.16
	# # /etc/resolv.conf.tail can replace this line
	#
	cat /etc/resolv.conf | grep domain | awk '{ print $2; }'
}

if [ "$(platform)" = "aws" ]
then
	NODES=$(node_hostnames)
else
	# We need to append to the hostnames with the DNS resolver address, or
	# else they won't resolve properly.
	#
	# We could potentially modify swarm to accept a "hostname" (more
	# properly nodename) type flag on join, but no such option seems
	# available today.
	NODES=$(node_hostnames | sed -e "s/$/.$(azure_resolver)/")
fi

# Session is set to a pseudo-random string combined with the current timestamp.
# This should minimize the probability of collision while also providing
# information about when the report was collected.
SESSION="$(date +'%s')-$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/" | dd bs=32 count=1 2>/dev/null)"

for NODE in ${NODES}
do
	curl -X POST \
		-F "session=${SESSION}" \
		"http://${NODE}:${DIAGNOSTICS_MAGIC_PORT}/diagnose"
done

echo "Done requesting diagnostics."
echo "Your diagnostics session ID is ${SESSION}"
echo "Please provide this session ID to the maintainer debugging your issue."
