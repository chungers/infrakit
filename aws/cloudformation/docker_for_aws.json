{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "Docker for AWS 1.13.0-rc3 (beta13)",

    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "MinLength": "1",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "InstanceType" : {
            "Type" : "String",
            "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
            "AllowedValues" : [
                "t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium",
                "m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge",
                "c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
                "i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
            "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
            "Default" : "t2.micro"
        },
        "ManagerInstanceType" : {
            "Type" : "String",
            "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
            "AllowedValues" : [
                "t2.micro","t2.small","t2.medium","t2.large","t2.xlarge","t2.2xlarge","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium",
                "m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge",
                "c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
                "i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
            "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
            "Default" : "t2.micro"
        },
        "ClusterSize" : {
            "Type" : "Number",
            "Default" : "5",
            "MinValue" : "0",
            "MaxValue" : "1000",
            "Description" : "Number of worker nodes in the Swarm (0-1000)."
        },
        "WorkerDiskSize" : {
            "Type" : "Number",
            "Default" : "20",
            "MinValue" : "20",
            "MaxValue" : "1024",
            "Description" : "Size of Workers's ephemeral storage volume in GiB"
        },
        "WorkerDiskType" : {
            "Type" : "String",
            "Default" : "standard",
            "AllowedValues" : ["standard", "gp2"],
            "Description" : "Worker ephemeral storage volume type"
        },
        "ManagerSize" : {
            "Type" : "Number",
            "Default" : "3",
            "AllowedValues" : ["1", "3", "5"],
            "Description" : "Number of Swarm manager nodes (1, 3, 5)"
        },
        "EnableSystemPrune" : {
            "Type" : "String",
            "Default" : "no",
            "AllowedValues" : ["no", "yes"],
            "Description" : "Cleans up unused images, containers, networks and volumes"
        },
        "EnableCloudWatchLogs" : {
            "Type" : "String",
            "Default" : "yes",
            "AllowedValues" : ["no", "yes"],
            "Description" : "Send all Container logs to CloudWatch"
        },
        "ManagerDiskSize" : {
            "Type" : "Number",
            "Default" : "20",
            "MinValue" : "20",
            "MaxValue" : "1024",
            "Description" : "Size of Manager's ephemeral storage volume in GiB"
        },
        "ManagerDiskType" : {
            "Type" : "String",
            "Default" : "standard",
            "AllowedValues" : ["standard", "gp2"],
            "Description" : "Manager ephemeral storage volume type"
        }
    },
    "Conditions" : {
        "CreateLogResources" : {"Fn::Equals" : [{"Ref" : "EnableCloudWatchLogs"}, "yes"]},
        "HasOnly2AZs" : {"Fn::Equals" : [{"Fn::FindInMap": ["AWSRegion2AZ", { "Ref": "AWS::Region" }, "NumAZs"]}, "2"]}
    },
    "Metadata" : {
        "AWS::CloudFormation::Interface" : {
            "ParameterGroups" : [
                {
                    "Label" : { "default" : "Swarm Size" },
                    "Parameters" : [ "ManagerSize", "ClusterSize" ]
                },
                {
                    "Label" : { "default" : "Swarm Properties" },
                    "Parameters" : [ "KeyName", "EnableSystemPrune", "EnableCloudWatchLogs" ]
                },
                {
                    "Label" : { "default":"Swarm Manager Properties" },
                    "Parameters" : [ "ManagerInstanceType", "ManagerDiskSize", "ManagerDiskType"  ]
                },
                {
                    "Label" : { "default":"Swarm Worker Properties" },
                    "Parameters" : [ "InstanceType", "WorkerDiskSize", "WorkerDiskType" ]
                }
            ],
            "ParameterLabels" : {
                "ManagerSize" : { "default" : "Number of Swarm managers?" },
                "ClusterSize" : { "default" : "Number of Swarm worker nodes?" },
                "InstanceType" : { "default" : "Agent worker instance type?" },
                "ManagerInstanceType" : { "default" : "Swarm manager instance type?" },
                "KeyName" : { "default" : "Which SSH key to use?" },
                "EnableSystemPrune": {"default" : "Enable daily resource cleanup?"},
                "EnableCloudWatchLogs":  {"default" : "Use Cloudwatch for container logging?"},
                "WorkerDiskSize" : { "default" : "Worker ephemeral storage volume size?" },
                "WorkerDiskType" : { "default" : "Worker ephemeral storage volume type" },
                "ManagerDiskSize" : { "default" : "Manager ephemeral storage volume size?" },
                "ManagerDiskType" : { "default" : "Manager ephemeral storage volume type" }
            }
        }
    },
    "Mappings": {
        "AWSRegion2AZ": {
            "ap-northeast-1": {
                "Name": "Tokyo",
                "NumAZs": "2",
                "AZ0": "0",
                "AZ1": "1",
                "AZ2": "0"
            },
            "ap-northeast-2": {
                "Name": "Seoul",
                "NumAZs": "2",
                "AZ0": "0",
                "AZ1": "1",
                "AZ2": "0"
            },
            "ap-south-1": {
                "Name": "Mumbai",
                "NumAZs": "2",
                "AZ0": "0",
                "AZ1": "1",
                "AZ2": "0"
            },
            "ap-southeast-1": {
                "Name": "Singapore",
                "NumAZs": "2",
                "AZ0": "0",
                "AZ1": "1",
                "AZ2": "0"
            },
            "ap-southeast-2": {
                "Name": "Sydney",
                "NumAZs": "3",
                "AZ0": "0",
                "AZ1": "1",
                "AZ2": "2"
            },
            "ca-central-1": {
                "Name": "Central",
                "NumAZs": "2",
                "AZ0": "0",
                "AZ1": "1",
                "AZ2": "0"
            },
            "eu-central-1": {
                "Name": "Frankfurt",
                "NumAZs": "2",
                "AZ0": "0",
                "AZ1": "1",
                "AZ2": "0"
            },
            "eu-west-1": {
                "Name": "Ireland",
                "NumAZs": "3",
                "AZ0": "0",
                "AZ1": "1",
                "AZ2": "2"
            },
            "eu-west-2": {
                "Name": "London",
                "NumAZs": "2",
                "AZ0": "0",
                "AZ1": "1",
                "AZ2": "0"
            },
            "sa-east-1": {
                "Name": "Sao Paulo",
                "NumAZs": "3",
                "AZ0": "0",
                "AZ1": "1",
                "AZ2": "2"
            },
            "us-east-1": {
                "Name": "N. Virgina",
                "NumAZs": "4",
                "AZ0": "0",
                "AZ1": "1",
                "AZ2": "2"
            },
            "us-east-2": {
                "Name": "Ohio",
                "NumAZs": "3",
                "AZ0": "0",
                "AZ1": "1",
                "AZ2": "2"
            },
            "us-west-1": {
                "Name": "N. California",
                "NumAZs": "2",
                "AZ0": "0",
                "AZ1": "1",
                "AZ2": "0"
            },
            "us-west-2": {
                "Name": "Oregon",
                "NumAZs": "3",
                "AZ0": "0",
                "AZ1": "1",
                "AZ2": "2"
            }
        },

        "DockerForAWS" : {
            "version" : {
                "docker": "1.13.0-rc3",
                "forAws": "aws-v1.13.0-rc3-beta13"
            }
        },

        "VpcCidrs" : {
            "vpc" : {
                "cidr": "172.31.0.0/16"
            },
            "pubsubnet1" : {
                "cidr": "172.31.0.0/20"
            },
            "pubsubnet2" : {
                "cidr": "172.31.16.0/20"
            },
            "pubsubnet3" : {
                "cidr": "172.31.32.0/20"
            },
            "pubsubnet4" : {
                "cidr": "172.31.48.0/20"
            }
        },

        "AWSInstanceType2Arch": {
            "t2.micro": {
                "Arch": "HVM64"
            },
            "t2.small": {
                "Arch": "HVM64"
            },
            "t2.medium": {
                "Arch": "HVM64"
            },
            "t2.large": {
                "Arch": "HVM64"
            },
            "t2.xlarge": {
                "Arch": "HVM64"
            },
            "t2.2xlarge": {
                "Arch": "HVM64"
            },
            "m3.medium": {
                "Arch": "HVM64"
            },
            "m3.large": {
                "Arch": "HVM64"
            },
            "m3.xlarge": {
                "Arch": "HVM64"
            },
            "m3.2xlarge": {
                "Arch": "HVM64"
            },
            "m4.large": {
                "Arch": "HVM64"
            },
            "m4.xlarge": {
                "Arch": "HVM64"
            },
            "m4.2xlarge": {
                "Arch": "HVM64"
            },
            "m4.4xlarge": {
                "Arch": "HVM64"
            },
            "m4.10xlarge": {
                "Arch": "HVM64"
            },
            "c3.large": {
                "Arch": "HVM64"
            },
            "c3.xlarge": {
                "Arch": "HVM64"
            },
            "c3.2xlarge": {
                "Arch": "HVM64"
            },
            "c3.4xlarge": {
                "Arch": "HVM64"
            },
            "c3.8xlarge": {
                "Arch": "HVM64"
            },
            "c4.large": {
                "Arch": "HVM64"
            },
            "c4.xlarge": {
                "Arch": "HVM64"
            },
            "c4.2xlarge": {
                "Arch": "HVM64"
            },
            "c4.4xlarge": {
                "Arch": "HVM64"
            },
            "c4.8xlarge": {
                "Arch": "HVM64"
            },
            "g2.2xlarge": {
                "Arch": "HVMG2"
            },
            "r3.large": {
                "Arch": "HVM64"
            },
            "r3.xlarge": {
                "Arch": "HVM64"
            },
            "r3.2xlarge": {
                "Arch": "HVM64"
            },
            "r3.4xlarge": {
                "Arch": "HVM64"
            },
            "r3.8xlarge": {
                "Arch": "HVM64"
            },
            "i2.xlarge": {
                "Arch": "HVM64"
            },
            "i2.2xlarge": {
                "Arch": "HVM64"
            },
            "i2.4xlarge": {
                "Arch": "HVM64"
            },
            "i2.8xlarge": {
                "Arch": "HVM64"
            },
            "d2.xlarge": {
                "Arch": "HVM64"
            },
            "d2.2xlarge": {
                "Arch": "HVM64"
            },
            "d2.4xlarge": {
                "Arch": "HVM64"
            },
            "d2.8xlarge": {
                "Arch": "HVM64"
            },
            "hi1.4xlarge": {
                "Arch": "HVM64"
            },
            "hs1.8xlarge": {
                "Arch": "HVM64"
            },
            "cr1.8xlarge": {
                "Arch": "HVM64"
            },
            "cc2.8xlarge": {
                "Arch": "HVM64"
            }
        },
        "AWSRegionArch2AMI": {
            "ap-northeast-1": {
                "HVM64": "ami-2adf624b",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-northeast-2": {
                "HVM64": "ami-c625f2a8",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-south-1": {
                "HVM64": "ami-0441366b",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-southeast-1": {
                "HVM64": "ami-e7a30f84",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-southeast-2": {
                "HVM64": "ami-1b6a5278",
                "HVMG2": "NOT_SUPPORTED"
            },
            "eu-central-1": {
                "HVM64": "ami-b7e325d8",
                "HVMG2": "NOT_SUPPORTED"
            },
            "eu-west-1": {
                "HVM64": "ami-aaadf6d9",
                "HVMG2": "NOT_SUPPORTED"
            },
            "sa-east-1": {
                "HVM64": "ami-20871e4c",
                "HVMG2": "NOT_SUPPORTED"
            },
            "us-east-1": {
                "HVM64": "ami-7ce6e16b",
                "HVMG2": "NOT_SUPPORTED"
            },
            "us-east-2": {
                "HVM64": "ami-cfbbe1aa",
                "HVMG2": "NOT_SUPPORTED"
            },
            "us-west-1": {
                "HVM64": "ami-5ba6f13b",
                "HVMG2": "NOT_SUPPORTED"
            },
            "us-west-2": {
                "HVM64": "ami-02258d62",
                "HVMG2": "NOT_SUPPORTED"
            }
        }
    },
    "Resources": {

        "Vpc" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", "vpc", "cidr" ] },
                "EnableDnsSupport" : "true",
                "EnableDnsHostnames" : "true",
                "Tags": [
                    { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "VPC"] ] } }
                ]
            }
        },

        "PubSubnetAz1" : {
            "DependsOn" : "Vpc",
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "Vpc" },
                "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", "pubsubnet1", "cidr" ] },
                "AvailabilityZone" : { "Fn::Select" : [
                    {"Fn::FindInMap": ["AWSRegion2AZ", { "Ref": "AWS::Region" }, "AZ0"]},
                    { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
                "Tags": [
                    { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet1"] ] } }
                ]
            }
        },

        "PubSubnetAz2" : {
            "DependsOn" : "Vpc",
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "Vpc" },
                "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", "pubsubnet2", "cidr" ] },
                "AvailabilityZone" :  { "Fn::Select" : [
                    {"Fn::FindInMap": ["AWSRegion2AZ", { "Ref": "AWS::Region" }, "AZ1"]},
                    { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
                "Tags": [
                    { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet2"] ] } }
                ]
            }
        },

        "PubSubnetAz3" : {
            "DependsOn" : "Vpc",
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "Vpc" },
                "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", "pubsubnet3", "cidr" ] },
                "AvailabilityZone" :  { "Fn::Select" : [
                    {"Fn::FindInMap": ["AWSRegion2AZ", { "Ref": "AWS::Region" }, "AZ2"]},
                    { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
                "Tags": [
                    { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet3"] ] } }
                ]
            }
        },

        "InternetGateway" : {
            "DependsOn" : "Vpc",
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags": [
                    { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "IGW"] ] } }
                ]
            }
        },

        "AttachGateway" : {
            "DependsOn" : ["Vpc", "InternetGateway"],
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : { "Ref" : "Vpc" },
                "InternetGatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "RouteViaIgw" : {
            "DependsOn" : "Vpc",
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "Vpc"},
                "Tags": [
                    { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "RT"] ] } }
                ]
            }
        },

        "PublicRouteViaIgw" : {
            "DependsOn": ["AttachGateway", "RouteViaIgw"],
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : { "Ref" : "RouteViaIgw" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "PubSubnet1RouteTableAssociation" : {
            "DependsOn": ["PubSubnetAz1", "RouteViaIgw"],
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PubSubnetAz1" },
                "RouteTableId" : { "Ref" : "RouteViaIgw" }
            }
        },

        "PubSubnet2RouteTableAssociation" : {
            "DependsOn": ["PubSubnetAz2", "RouteViaIgw"],
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PubSubnetAz2" },
                "RouteTableId" : { "Ref" : "RouteViaIgw" }
            }
        },

        "PubSubnet3RouteTableAssociation" : {
            "DependsOn": ["PubSubnetAz3", "RouteViaIgw"],
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PubSubnetAz3" },
                "RouteTableId" : { "Ref" : "RouteViaIgw" }
            }
        },

        "SwarmWideSG": {
            "DependsOn": "Vpc",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Swarm wide access",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": { "Fn::FindInMap" : [ "VpcCidrs", "vpc", "cidr" ] }
                    }
                ]
            }
        },
        "SwarmSQSCleanup" : {
            "Type": "AWS::SQS::Queue",
            "Properties": {
                "ReceiveMessageWaitTimeSeconds": 10,
                "MessageRetentionPeriod": 43200
            }
        },
        "SwarmSQS" : {
            "Type": "AWS::SQS::Queue",
            "Properties": {
                "ReceiveMessageWaitTimeSeconds": 10,
                "MessageRetentionPeriod": 43200
            }
        },
        "SwarmManagerUpgradeHook": {
            "Type": "AWS::AutoScaling::LifecycleHook",
            "DependsOn" : "SwarmSQS",
            "Properties": {
                "AutoScalingGroupName": { "Ref": "ManagerAsg" },
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
                "NotificationTargetARN": { "Fn::GetAtt": [ "SwarmSQS", "Arn" ] },
                "RoleARN": { "Fn::GetAtt": [ "ProxyRole", "Arn" ] }
            }
        },
        "SwarmWorkerUpgradeHook": {
            "Type": "AWS::AutoScaling::LifecycleHook",
            "DependsOn" : "SwarmSQS",
            "Properties": {
                "AutoScalingGroupName": { "Ref": "NodeAsg" },
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
                "NotificationTargetARN": { "Fn::GetAtt": [ "SwarmSQS", "Arn" ] },
                "RoleARN": { "Fn::GetAtt": [ "ProxyRole", "Arn" ] }
            }
        },
        "ManagerVpcSG": {
            "DependsOn": "NodeVpcSG",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Manager SecurityGroup",
                "SecurityGroupIngress": [
                    {"IpProtocol": "tcp", "FromPort": "22","ToPort": "22","CidrIp": "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : "2377", "ToPort" : "2377", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
                    {"IpProtocol" : "udp", "FromPort" : "4789", "ToPort" : "4789", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
                    {"IpProtocol" : "tcp", "FromPort" : "7946", "ToPort" : "7946", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } },
                    {"IpProtocol" : "udp", "FromPort" : "7946", "ToPort" : "7946", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeVpcSG", "GroupId" ] } }
                ]
            }
        },
        "NodeVpcSG": {
            "DependsOn": "Vpc",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Node SecurityGroup",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": { "Fn::FindInMap" : [ "VpcCidrs", "vpc", "cidr" ] }
                    }
                ],
                "SecurityGroupEgress": [
                    {"IpProtocol" : "icmp", "FromPort" : "8", "ToPort" : "0", "CidrIp": "0.0.0.0/0" },
                    {"IpProtocol" : "udp", "FromPort" : "0", "ToPort" : "65535", "CidrIp": "0.0.0.0/0" },
                    {"IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "2374", "CidrIp": "0.0.0.0/0" },
                    {"IpProtocol" : "tcp", "FromPort" : "2376", "ToPort" : "65535", "CidrIp": "0.0.0.0/0" }
                ]
            }
        },

        "SwarmDynDBTable" : {
            "DependsOn" : "ExternalLoadBalancer",
              "Type" : "AWS::DynamoDB::Table",
              "Properties" : {
                "TableName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "dyndbtable" ] ] },
                "AttributeDefinitions": [ {
                  "AttributeName" : "node_type",
                  "AttributeType" : "S"
                } ],
                "KeySchema": [
                  { "AttributeName": "node_type" , "KeyType": "HASH" }
                ],
                "ProvisionedThroughput" : {
                  "ReadCapacityUnits" : 1,
                  "WriteCapacityUnits" : 1
                }
              }
          },
       "DockerLogGroup": {
          "Type" : "AWS::Logs::LogGroup",
          "Condition" : "CreateLogResources",
          "Properties" : {
            "LogGroupName" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "lg" ] ] },
            "RetentionInDays" : 7
          }
        },
        "ManagerAsg" : {
            "DependsOn" : ["SwarmDynDBTable", "PubSubnetAz1", "PubSubnetAz2", "PubSubnetAz3", "ExternalLoadBalancer"],
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "VPCZoneIdentifier" : [{
                    "Fn::If": [
                      "HasOnly2AZs",
                        { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" } ] ] },
                        { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" }, { "Ref" : "PubSubnetAz3" } ] ] }
                    ]
                }],
                "LaunchConfigurationName" : { "Ref" : "ManagerLaunchConfigBeta3" },
                "LoadBalancerNames" : [ { "Ref" : "ExternalLoadBalancer" } ],
                "MinSize" : "0",
                "MaxSize" : "5",
                "DesiredCapacity" : { "Ref" : "ManagerSize" },
                "Tags": [
                    { "Key" : "Name",
                      "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Manager" ] ] },
                      "PropagateAtLaunch" : "true" },
                    { "Key" : "swarm-node-type",
                      "Value" : "manager",
                      "PropagateAtLaunch" : "true" },
                    { "Key" : "swarm-stack-id",
                      "Value" : { "Ref" : "AWS::StackId"},
                      "PropagateAtLaunch" : "true" },
                    { "Key": "DOCKER_FOR_AWS_VERSION",
                      "Value": { "Fn::FindInMap" : [ "DockerForAWS", "version", "forAws" ] },
                      "PropagateAtLaunch" : "true" },
                    { "Key": "DOCKER_VERSION",
                     "Value": { "Fn::FindInMap" : [ "DockerForAWS", "version", "docker" ] },
                     "PropagateAtLaunch" : "true"
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                  "Count": { "Ref" : "ManagerSize"},
                  "Timeout": "PT20M"
                }
            },
            "UpdatePolicy" : {
              "AutoScalingRollingUpdate" : {
                 "MinInstancesInService" : { "Ref" : "ManagerSize"},
                 "MaxBatchSize" : "1",
                 "WaitOnResourceSignals" : "true",
                 "PauseTime" : "PT20M"
              }
           }
        },

        "ManagerLaunchConfigBeta3": {
            "DependsOn": "ExternalLoadBalancer",
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "InstanceType": {"Ref" : "ManagerInstanceType"},
                "BlockDeviceMappings" : [ {
                    "DeviceName" : "/dev/xvdb",
                    "Ebs" : {
                        "VolumeSize" : { "Ref" : "ManagerDiskSize" },
                        "VolumeType" : { "Ref" : "ManagerDiskType" }
                    }
                 }],
                "IamInstanceProfile" : { "Ref" : "ProxyInstanceProfile" },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                        "Ref": "AWS::Region"
                    }, {
                        "Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref" : "ManagerInstanceType"}, "Arch"]
                    }]
                },
                "AssociatePublicIpAddress": "true",
                "SecurityGroups": [ { "Ref" : "ManagerVpcSG"}, { "Ref" : "SwarmWideSG"} ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/sh\n",
                                "echo \"", {"Ref": "ExternalLoadBalancer"}, "\" > /var/lib/docker/swarm/lb_name\n",
                                "echo \"# hostname : ELB_name\" >> /var/lib/docker/swarm/elb.config\n",
                                "echo \"127.0.0.1: ", {"Ref": "ExternalLoadBalancer"}, "\" >> /var/lib/docker/swarm/elb.config\n",
                                "echo \"localhost: ", {"Ref": "ExternalLoadBalancer"}, "\" >> /var/lib/docker/swarm/elb.config\n",
                                "echo \"default: ", {"Ref": "ExternalLoadBalancer"}, "\" >> /var/lib/docker/swarm/elb.config\n",
                                "export DOCKER_FOR_IAAS_VERSION='", { "Fn::FindInMap" : [ "DockerForAWS", "version", "forAws" ] }, "'\n",
                                "export LOCAL_IP=$(wget -qO- http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                                "export ENABLE_CLOUDWATCH_LOGS='", {"Ref": "EnableCloudWatchLogs"} , "'\n",
                                "if [ $ENABLE_CLOUDWATCH_LOGS == 'yes' ] ; then \n",
                                    "echo '{\"experimental\": true, \"log-driver\": \"awslogs\",\"log-opts\": {\"awslogs-group\":\"",
                                    { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "lg" ] ] },
                                    "\", \"tag\": \"{{.Name}}-{{.ID}}\" }}' > /etc/docker/daemon.json \n",
                                "else\n",
                                    "echo '{\"experimental\": true }' > /etc/docker/daemon.json \n",
                                "fi\n",
                                "chown -R docker /home/docker/\n",
                                "chgrp -R docker /home/docker/\n",
                                "rc-service docker restart\n",
                                "sleep 5\n",

                                "docker run --log-driver=json-file --name=meta-aws --restart=always -d -p $LOCAL_IP:9024:8080 ",
                                "-e AWS_REGION='",{ "Ref" : "AWS::Region" }, "' ",
                                "-e MANAGER_SECURITY_GROUP_ID='",{ "Ref" : "ManagerVpcSG" }, "' ",
                                "-e WORKER_SECURITY_GROUP_ID='",{ "Ref" : "NodeVpcSG" }, "' ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "docker4x/meta-aws:$DOCKER_FOR_IAAS_VERSION metaserver -flavor=aws\n",

                                "docker run --log-driver=json-file --restart=no -d ",
                                "-e DYNAMODB_TABLE='", { "Ref" : "SwarmDynDBTable" } , "' ",
                                "-e NODE_TYPE='manager' ",
                                "-e REGION='",{ "Ref" : "AWS::Region" }, "' ",
                                "-e STACK_NAME='",{ "Ref" : "AWS::StackName" }, "' ",
                                "-e STACK_ID='",{ "Ref" : "AWS::StackId" }, "' ",
                                "-e ACCOUNT_ID='",{ "Ref" : "AWS::AccountId" }, "' ",
                                "-e INSTANCE_NAME='ManagerAsg' ",
                                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /usr/bin/docker:/usr/bin/docker ",
                                "-v /var/log:/var/log ",
                                "docker4x/init-aws:$DOCKER_FOR_IAAS_VERSION\n",

                                "docker run --log-driver=json-file --name=guide-aws --restart=always -d ",
                                "-e DYNAMODB_TABLE='", { "Ref" : "SwarmDynDBTable" } , "' ",
                                "-e NODE_TYPE='manager' ",
                                "-e REGION='",{ "Ref" : "AWS::Region" }, "' ",
                                "-e STACK_NAME='",{ "Ref" : "AWS::StackName" }, "' ",
                                "-e INSTANCE_NAME='ManagerAsg' ",
                                "-e VPC_ID='",{ "Ref" : "Vpc" }, "' ",
                                "-e STACK_ID='",{ "Ref" : "AWS::StackId" }, "' ",
                                "-e ACCOUNT_ID='",{ "Ref" : "AWS::AccountId" }, "' ",
                                "-e SWARM_QUEUE='",{ "Ref" : "SwarmSQS" }, "' ",
                                "-e CLEANUP_QUEUE='",{ "Ref" : "SwarmSQSCleanup" }, "' ",
                                "-e RUN_VACUUM='",{ "Ref" : "EnableSystemPrune" }, "' ",
                                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /usr/bin/docker:/usr/bin/docker ",
                                "docker4x/guide-aws:$DOCKER_FOR_IAAS_VERSION\n",

                                "docker volume create --name sshkey\n",

                                "docker run --log-driver=json-file -ti --rm ",
                                "--user root ",
                                "-v sshkey:/etc/ssh ",
                                "--entrypoint ssh-keygen ",
                                "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION ",
                                "-A\n",

                                "docker run --log-driver=json-file --name=shell-aws --restart=always -d -p 22:22 ",
                                "-v /home/docker/:/home/docker/ ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /var/lib/docker/swarm/lb_name:/var/lib/docker/swarm/lb_name:ro ",
                                "-v /var/lib/docker/swarm/elb.config:/var/lib/docker/swarm/elb.config ",
                                "-v /usr/bin/docker:/usr/bin/docker ",
                                "-v /var/log:/var/log ",
                                "-v sshkey:/etc/ssh ",
                                "-v /etc/passwd:/etc/passwd:ro ",
                                "-v /etc/shadow:/etc/shadow:ro ",
                                "-v /etc/group:/etc/group:ro ",
                                "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION\n",

                                "docker run --log-driver=json-file --name=l4controller-aws --restart=always -d ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /var/lib/docker/swarm:/var/lib/docker/swarm ",
                                "docker4x/l4controller-aws:$DOCKER_FOR_IAAS_VERSION run --log=4 --all=true\n"
                            ]
                        ]
                    }
                }
            }
        },
        "NodeAsg" : {
            "DependsOn" : "ManagerAsg",
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "VPCZoneIdentifier" : [{
                    "Fn::If": [
                      "HasOnly2AZs",
                        { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" } ] ] },
                        { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" }, { "Ref" : "PubSubnetAz3" } ] ] }
                    ]
                }],
                "LaunchConfigurationName" : { "Ref" : "NodeLaunchConfigBeta3" },
                "LoadBalancerNames" : [ { "Ref" : "ExternalLoadBalancer" } ],
                "MinSize" : "0",
                "MaxSize" : "1000",
                "DesiredCapacity" : { "Ref" : "ClusterSize"},
                "Tags": [
                    { "Key" : "Name",
                      "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "worker" ] ] },
                      "PropagateAtLaunch" : "true" },
                    { "Key" : "swarm-node-type",
                      "Value" : "worker",
                      "PropagateAtLaunch" : "true" },
                    { "Key" : "swarm-stack-id",
                      "Value" : { "Ref" : "AWS::StackId"},
                      "PropagateAtLaunch" : "true" },
                    { "Key": "DOCKER_FOR_AWS_VERSION",
                      "Value": { "Fn::FindInMap" : [ "DockerForAWS", "version", "forAws" ] },
                      "PropagateAtLaunch" : "true" },
                    { "Key": "DOCKER_VERSION",
                      "Value": { "Fn::FindInMap" : [ "DockerForAWS", "version", "docker" ] },
                      "PropagateAtLaunch" : "true"
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                  "Count": { "Ref" : "ClusterSize"},
                  "Timeout": "PT2H"
                }
            },
            "UpdatePolicy" : {
              "AutoScalingRollingUpdate" : {
                 "MinInstancesInService" : { "Ref" : "ClusterSize"},
                 "MaxBatchSize" : "1",
                 "WaitOnResourceSignals" : "true",
                 "PauseTime" : "PT1H"
              }
           }
        },
        "NodeLaunchConfigBeta3": {
            "DependsOn": "ManagerAsg",
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "InstanceType": {"Ref" : "InstanceType"},
                "BlockDeviceMappings" : [ {
                    "DeviceName" : "/dev/xvdb",
                    "Ebs" : {
                        "VolumeSize" : { "Ref" : "WorkerDiskSize" },
                        "VolumeType" : { "Ref" : "WorkerDiskType" }
                    }
                 }],
                "IamInstanceProfile" : { "Ref" : "ProxyInstanceProfile" },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                        "Ref": "AWS::Region"
                    }, {
                        "Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref" : "InstanceType"}, "Arch"]
                    }]
                },
                "AssociatePublicIpAddress": "true",
                "SecurityGroups": [ { "Ref" : "NodeVpcSG"} ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/sh\n",
                                "export DOCKER_FOR_IAAS_VERSION='", { "Fn::FindInMap" : [ "DockerForAWS", "version", "forAws" ] }, "'\n",
                                "export ENABLE_CLOUDWATCH_LOGS='", {"Ref": "EnableCloudWatchLogs"} , "'\n",
                                "if [ $ENABLE_CLOUDWATCH_LOGS == 'yes' ] ; then \n",
                                    "echo '{\"experimental\": true, \"log-driver\": \"awslogs\",\"log-opts\": {\"awslogs-group\":\"",
                                    { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "lg" ] ] },
                                    "\", \"tag\": \"{{.Name}}-{{.ID}}\" }}' > /etc/docker/daemon.json \n",
                                "else\n",
                                    "echo '{\"experimental\": true }' > /etc/docker/daemon.json \n",
                                "fi\n",
                                "chown -R docker /home/docker/\n",
                                "chgrp -R docker /home/docker/\n",
                                "rc-service docker restart\n",
                                "sleep 5\n",
                                "docker run --log-driver=json-file --restart=no -d ",
                                "-e DYNAMODB_TABLE='", { "Ref" : "SwarmDynDBTable" } , "' ",
                                "-e NODE_TYPE='worker' ",
                                "-e REGION='",{ "Ref" : "AWS::Region" }, "' ",
                                "-e STACK_NAME='",{ "Ref" : "AWS::StackName" }, "' ",
                                "-e STACK_ID='",{ "Ref" : "AWS::StackId" }, "' ",
                                "-e ACCOUNT_ID='",{ "Ref" : "AWS::AccountId" }, "' ",
                                "-e INSTANCE_NAME='NodeAsg' ",
                                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /usr/bin/docker:/usr/bin/docker ",
                                "-v /var/log:/var/log ",
                                "docker4x/init-aws:$DOCKER_FOR_IAAS_VERSION\n",

                                "docker volume create --name sshkey\n",

                                "docker run --log-driver=json-file -ti --rm ",
                                "--user root ",
                                "-v sshkey:/etc/ssh ",
                                "--entrypoint ssh-keygen ",
                                "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION ",
                                "-A\n",

                                "docker run --log-driver=json-file --name=shell-aws --restart=always -d -p 22:22 ",
                                "-v /home/docker/:/home/docker/ ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /usr/bin/docker:/usr/bin/docker ",
                                "-v /var/log:/var/log ",
                                "-v sshkey:/etc/ssh ",
                                "-v /etc/passwd:/etc/passwd:ro ",
                                "-v /etc/shadow:/etc/shadow:ro ",
                                "-v /etc/group:/etc/group:ro ",
                                "docker4x/shell-aws:$DOCKER_FOR_IAAS_VERSION\n",

                                "docker run --log-driver=json-file --name=guide-aws --restart=always -d ",
                                "-e DYNAMODB_TABLE='", { "Ref" : "SwarmDynDBTable" } , "' ",
                                "-e NODE_TYPE='worker' ",
                                "-e REGION='",{ "Ref" : "AWS::Region" }, "' ",
                                "-e STACK_NAME='",{ "Ref" : "AWS::StackName" }, "' ",
                                "-e INSTANCE_NAME='NodeAsg' ",
                                "-e VPC_ID='",{ "Ref" : "Vpc" }, "' ",
                                "-e STACK_ID='",{ "Ref" : "AWS::StackId" }, "' ",
                                "-e ACCOUNT_ID='",{ "Ref" : "AWS::AccountId" }, "' ",
                                "-e SWARM_QUEUE='",{ "Ref" : "SwarmSQS" }, "' ",
                                "-e CLEANUP_QUEUE='",{ "Ref" : "SwarmSQSCleanup" }, "' ",
                                "-e RUN_VACUUM='",{ "Ref" : "EnableSystemPrune" }, "' ",
                                "-e DOCKER_FOR_IAAS_VERSION=$DOCKER_FOR_IAAS_VERSION ",
                                "-v /var/run/docker.sock:/var/run/docker.sock ",
                                "-v /usr/bin/docker:/usr/bin/docker ",
                                "docker4x/guide-aws:$DOCKER_FOR_IAAS_VERSION\n"
                            ]
                        ]
                    }
                }
            }
        },
        "ExternalLoadBalancerSG": {
            "DependsOn": "Vpc",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "External Load Balancer SecurityGroup",
                "SecurityGroupIngress": [
                    {"IpProtocol": "-1","FromPort": "0","ToPort": "65535","CidrIp": "0.0.0.0/0"}
                ]
            }
        },
        "ExternalLoadBalancer" : {
            "DependsOn" : ["AttachGateway", "ExternalLoadBalancerSG", "PubSubnetAz1", "PubSubnetAz2", "PubSubnetAz3"],
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "ConnectionSettings" : {
                    "IdleTimeout" : "600"
                },
                "Subnets": {
                    "Fn::If": [
                      "HasOnly2AZs",
                      [
                              { "Ref" : "PubSubnetAz1" },
                              { "Ref" : "PubSubnetAz2" }
                      ],
                      [
                              { "Ref" : "PubSubnetAz1" },
                              { "Ref" : "PubSubnetAz2" },
                              { "Ref" : "PubSubnetAz3" }
                      ]
                  ]
                },
                "Listeners" : [
                    {
                        "LoadBalancerPort" : "7",
                        "InstancePort" : "7",
                        "Protocol" : "TCP"
                    }
                ],
                "LoadBalancerName" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "ELB" ] ] },
                "CrossZone" : "true",
                "HealthCheck" : {
                    "HealthyThreshold" : "2",
                    "Interval" : "10",
                    "Target" : "TCP:44554",
                    "Timeout" : "2",
                    "UnhealthyThreshold" : "4"
                },
                "SecurityGroups" : [ { "Ref" : "ExternalLoadBalancerSG" } ],
                "Tags": [
                    {
                        "Key" : "Name",
                        "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "ELB" ] ] }
                    }
                ]
            }
        },
    "ProxyRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
        "AssumeRolePolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
            "Effect": "Allow",
            "Principal": {
                "Service": [ "ec2.amazonaws.com", "autoscaling.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
            } ]
        },
        "Path": "/"
            }
    },
    "DynDBPolicies": {
        "DependsOn": ["ProxyRole", "SwarmDynDBTable"],
        "Type": "AWS::IAM::Policy",
        "Properties": {
        "PolicyName": "dyndb-getput",
        "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
                "Effect": "Allow",
                "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:Query"
                ],
                "Resource": { "Fn::Join": ["", ["arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "SwarmDynDBTable" }]] }
            } ]
        },
        "Roles": [ {
            "Ref": "ProxyRole"
        } ]
            }
    },
    "SwarmAPIPolicy": {
        "DependsOn": "ProxyRole",
        "Type": "AWS::IAM::Policy",
        "Properties": {
        "PolicyName": "swarm-policy",
        "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
                "Effect": "Allow",
                "Action": [
                    "ec2:DescribeInstances",
                    "ec2:DescribeVpcAttribute",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                ],
                "Resource": "*"
            } ]
        },
        "Roles": [ {
            "Ref": "ProxyRole"
        } ]
            }
    },
    "SwarmSQSPolicy": {
        "DependsOn": ["ProxyRole", "SwarmSQS"],
        "Type": "AWS::IAM::Policy",
        "Properties": {
        "PolicyName": "swarm-sqs-policy",
        "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
                "Effect": "Allow",
                "Action": "sqs:*",
                "Resource": { "Fn::GetAtt" : ["SwarmSQS", "Arn"]}
            } ]
        },
        "Roles": [ {
            "Ref": "ProxyRole"
        } ]
            }
    },
    "SwarmSQSCleanupPolicy": {
        "DependsOn": ["ProxyRole", "SwarmSQSCleanup"],
        "Type": "AWS::IAM::Policy",
        "Properties": {
        "PolicyName": "swarm-sqs-cleanup-policy",
        "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
                "Effect": "Allow",
                "Action": "sqs:*",
                "Resource": { "Fn::GetAtt" : ["SwarmSQSCleanup", "Arn"]}
            } ]
        },
        "Roles": [ {
            "Ref": "ProxyRole"
        } ]
            }
    },
    "SwarmAutoscalePolicy": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
        "PolicyName": "swarm-autoscale-policy",
        "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
                "Effect": "Allow",
                "Action": "autoscaling:*",
                "Resource": "*"
            } ]
        },
        "Roles": [ {
            "Ref": "ProxyRole"
        } ]
            }
    },
    "ProxyPolicies": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
        "PolicyName": "elb-update",
        "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
            "Effect": "Allow",
            "Action": "elasticloadbalancing:*",
            "Resource": "*"
            } ]
        },
        "Roles": [ {
            "Ref": "ProxyRole"
        } ]
            }
    },
    "ProxyInstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
        "Path": "/",
        "Roles": [ {
            "Ref": "ProxyRole"
        } ]
            }
    }
    },
    "Outputs": {
    	"Managers": {
    	    "Description": "You can see the manager nodes associated with this cluster here.  Follow the instructions here: https://beta.docker.com/docs/deploy/",
    	    "Value": {
    		"Fn::Join": [ "", [
    		    "https://",
    		    { "Ref": "AWS::Region" },
    		    ".console.aws.amazon.com/ec2/v2/home?region=",
    		    { "Ref": "AWS::Region" },
    		    "#Instances:tag:aws:autoscaling:groupName=",
    		    { "Ref": "ManagerAsg" },
    		    ";sort=desc:dnsName"
    		]]
    	    }
    	},
        "DefaultDNSTarget" : {
                "Description" : "Use this name to update your DNS records",
                "Value" : {
                "Fn::GetAtt" : [ "ExternalLoadBalancer", "DNSName" ]
                }
        },
        "ZoneAvailabilityComment" : {
            "Description" : "Availabilty Zones Comment",
            "Value" : {
                "Fn::If" : [
                  "HasOnly2AZs",
                  "This region only has 2 Availabiliy Zones (AZ). If one of those AZs goes away, it will cause problems for your Swarm Managers. Please use a Region with at least 3 AZs.",
                  "This region has at least 3 Availability Zones (AZ). This is ideal to ensure a fully functional Swarm in case you lose an AZ."
                ]
            }
        }
    }
}
